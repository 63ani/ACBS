;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 1/20/2024 11:36:30 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2DA7      	GOTO       1447
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x1703      	BSF        STATUS, 6
0x0008	0x00A5      	MOVWF      ___saveSTATUS
0x0009	0x080A      	MOVF       PCLATH, 0
0x000A	0x00A4      	MOVWF      ___savePCLATH
0x000B	0x018A      	CLRF       PCLATH
0x000C	0x0870      	MOVF       R0, 0
0x000D	0x1303      	BCF        STATUS, 6
0x000E	0x00A0      	MOVWF      32
0x000F	0x0804      	MOVF       FSR, 0
0x0010	0x00A1      	MOVWF      33
;ACB_2.c,50 :: 		void interrupt(void) {
;ACB_2.c,51 :: 		if (INTCON & 0x01) {      // PORTB Change interrupt
0x0011	0x1C0B      	BTFSS      INTCON, 0
0x0012	0x281D      	GOTO       L_interrupt0
;ACB_2.c,52 :: 		if (PORTB & 0x10)       // X_Limit = 1
0x0013	0x1E06      	BTFSS      PORTB, 4
0x0014	0x2817      	GOTO       L_interrupt1
;ACB_2.c,53 :: 		PORTE = PORTE | 0x01; // Turn off X axis motor
0x0015	0x1409      	BSF        PORTE, 0
0x0016	0x281A      	GOTO       L_interrupt2
L_interrupt1:
;ACB_2.c,54 :: 		else if (PORTB & 0x20)  // Y_Limit = 1
0x0017	0x1E86      	BTFSS      PORTB, 5
0x0018	0x281A      	GOTO       L_interrupt3
;ACB_2.c,55 :: 		PORTE = PORTE | 0x02; // Turn off Y axis motor
0x0019	0x1489      	BSF        PORTE, 1
L_interrupt3:
L_interrupt2:
;ACB_2.c,57 :: 		INTCON = INTCON & 0xFE; // Clear RBIF
0x001A	0x30FE      	MOVLW      254
0x001B	0x058B      	ANDWF      INTCON, 1
;ACB_2.c,58 :: 		} else if (PIR1 & 0x20) { // Received data
0x001C	0x2832      	GOTO       L_interrupt4
L_interrupt0:
0x001D	0x1E8C      	BTFSS      PIR1, 5
0x001E	0x2828      	GOTO       L_interrupt5
;ACB_2.c,59 :: 		myRxBuffer[Rx_count] = RCREG;
0x001F	0x086C      	MOVF       _Rx_count, 0
0x0020	0x3E22      	ADDLW      _myRxBuffer
0x0021	0x0084      	MOVWF      FSR
0x0022	0x081A      	MOVF       RCREG, 0
0x0023	0x0080      	MOVWF      INDF
;ACB_2.c,60 :: 		Rx_count++;
0x0024	0x0AEC      	INCF       _Rx_count, 1
;ACB_2.c,61 :: 		PIR1 = PIR1 & 0xDF;       // Clear RCIF
0x0025	0x30DF      	MOVLW      223
0x0026	0x058C      	ANDWF      PIR1, 1
;ACB_2.c,62 :: 		} else if (INTCON & 0x04) { // TMRO overflow
0x0027	0x2832      	GOTO       L_interrupt6
L_interrupt5:
0x0028	0x1D0B      	BTFSS      INTCON, 2
0x0029	0x2832      	GOTO       L_interrupt7
;ACB_2.c,63 :: 		TMR0 = 248;
0x002A	0x30F8      	MOVLW      248
0x002B	0x0081      	MOVWF      TMR0
;ACB_2.c,64 :: 		tick++;
0x002C	0x1703      	BSF        STATUS, 6
0x002D	0x0A9E      	INCF       _tick, 1
0x002E	0x1903      	BTFSC      STATUS, 2
0x002F	0x0A9F      	INCF       _tick+1, 1
;ACB_2.c,65 :: 		INTCON = INTCON & 0xFB;
0x0030	0x30FB      	MOVLW      251
0x0031	0x058B      	ANDWF      INTCON, 1
;ACB_2.c,66 :: 		}
L_interrupt7:
L_interrupt6:
L_interrupt4:
;ACB_2.c,67 :: 		}
L_end_interrupt:
L__interrupt117:
0x0032	0x1303      	BCF        STATUS, 6
0x0033	0x0820      	MOVF       32, 0
0x0034	0x00F0      	MOVWF      R0
0x0035	0x0821      	MOVF       33, 0
0x0036	0x0084      	MOVWF      FSR
0x0037	0x1703      	BSF        STATUS, 6
0x0038	0x0824      	MOVF       ___savePCLATH, 0
0x0039	0x008A      	MOVWF      PCLATH
0x003A	0x0E25      	SWAPF      ___saveSTATUS, 0
0x003B	0x0083      	MOVWF      STATUS
0x003C	0x0EFF      	SWAPF      R15, 1
0x003D	0x0E7F      	SWAPF      R15, 0
0x003E	0x0009      	RETFIE
; end of _interrupt
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x003F	0x0000      	NOP
0x0040	0x0000      	NOP
;__Lib_Delays.c,9 :: 		}
L_end_Delay_1us:
0x0041	0x0008      	RETURN
; end of _Delay_1us
_Delay_50us:
;__Lib_Delays.c,19 :: 		void Delay_50us() {
;__Lib_Delays.c,20 :: 		Delay_us(50);
0x0042	0x3021      	MOVLW      33
0x0043	0x1283      	BCF        STATUS, 5
0x0044	0x1303      	BCF        STATUS, 6
0x0045	0x00FD      	MOVWF      R13
L_Delay_50us2:
0x0046	0x0BFD      	DECFSZ     R13, 1
0x0047	0x2846      	GOTO       L_Delay_50us2
;__Lib_Delays.c,21 :: 		}
L_end_Delay_50us:
0x0048	0x0008      	RETURN
; end of _Delay_50us
_Delay_5500us:
;__Lib_Delays.c,31 :: 		void Delay_5500us() {
;__Lib_Delays.c,32 :: 		Delay_us(5500);
0x0049	0x300F      	MOVLW      15
0x004A	0x1283      	BCF        STATUS, 5
0x004B	0x1303      	BCF        STATUS, 6
0x004C	0x00FC      	MOVWF      R12
0x004D	0x3047      	MOVLW      71
0x004E	0x00FD      	MOVWF      R13
L_Delay_5500us5:
0x004F	0x0BFD      	DECFSZ     R13, 1
0x0050	0x284F      	GOTO       L_Delay_5500us5
0x0051	0x0BFC      	DECFSZ     R12, 1
0x0052	0x284F      	GOTO       L_Delay_5500us5
0x0053	0x0000      	NOP
0x0054	0x0000      	NOP
;__Lib_Delays.c,33 :: 		}
L_end_Delay_5500us:
0x0055	0x0008      	RETURN
; end of _Delay_5500us
_MotorDelay:
;ACB_2.c,174 :: 		void MotorDelay() {
;ACB_2.c,175 :: 		for (a = 0; a < 200; a++)
0x0056	0x1683      	BSF        STATUS, 5
0x0057	0x1303      	BCF        STATUS, 6
0x0058	0x01EF      	CLRF       _a
L_MotorDelay27:
0x0059	0x30C8      	MOVLW      200
0x005A	0x026F      	SUBWF      _a, 0
0x005B	0x1803      	BTFSC      STATUS, 0
0x005C	0x285F      	GOTO       L_MotorDelay28
0x005D	0x0AEF      	INCF       _a, 1
;ACB_2.c,176 :: 		;
0x005E	0x2859      	GOTO       L_MotorDelay27
L_MotorDelay28:
;ACB_2.c,177 :: 		}
L_end_MotorDelay:
0x005F	0x0008      	RETURN
; end of _MotorDelay
_Lcd_Cmd:
;__Lib_Lcd.c,18 :: 		
;__Lib_Lcd.c,20 :: 		
0x0060	0x1283      	BCF        STATUS, 5
0x0061	0x1703      	BSF        STATUS, 6
0x0062	0x1BB0      	BTFSC      FARG_Lcd_Cmd_out_char, 7
0x0063	0x2866      	GOTO       L__Lcd_Cmd21
0x0064	0x1186      	BCF        LCD_D7, BitPos(LCD_D7+0)
0x0065	0x2867      	GOTO       L__Lcd_Cmd22
L__Lcd_Cmd21:
0x0066	0x1586      	BSF        LCD_D7, BitPos(LCD_D7+0)
L__Lcd_Cmd22:
;__Lib_Lcd.c,21 :: 		
0x0067	0x1B30      	BTFSC      FARG_Lcd_Cmd_out_char, 6
0x0068	0x286B      	GOTO       L__Lcd_Cmd23
0x0069	0x1106      	BCF        LCD_D6, BitPos(LCD_D6+0)
0x006A	0x286C      	GOTO       L__Lcd_Cmd24
L__Lcd_Cmd23:
0x006B	0x1506      	BSF        LCD_D6, BitPos(LCD_D6+0)
L__Lcd_Cmd24:
;__Lib_Lcd.c,22 :: 		
0x006C	0x1AB0      	BTFSC      FARG_Lcd_Cmd_out_char, 5
0x006D	0x2870      	GOTO       L__Lcd_Cmd25
0x006E	0x1086      	BCF        LCD_D5, BitPos(LCD_D5+0)
0x006F	0x2871      	GOTO       L__Lcd_Cmd26
L__Lcd_Cmd25:
0x0070	0x1486      	BSF        LCD_D5, BitPos(LCD_D5+0)
L__Lcd_Cmd26:
;__Lib_Lcd.c,23 :: 		
0x0071	0x1A30      	BTFSC      FARG_Lcd_Cmd_out_char, 4
0x0072	0x2876      	GOTO       L__Lcd_Cmd27
0x0073	0x1303      	BCF        STATUS, 6
0x0074	0x1105      	BCF        LCD_D4, BitPos(LCD_D4+0)
0x0075	0x2878      	GOTO       L__Lcd_Cmd28
L__Lcd_Cmd27:
0x0076	0x1303      	BCF        STATUS, 6
0x0077	0x1505      	BSF        LCD_D4, BitPos(LCD_D4+0)
L__Lcd_Cmd28:
;__Lib_Lcd.c,25 :: 		
0x0078	0x1703      	BSF        STATUS, 6
0x0079	0x1820      	BTFSC      __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
0x007A	0x287E      	GOTO       L__Lcd_Cmd29
0x007B	0x1303      	BCF        STATUS, 6
0x007C	0x1607      	BSF        LCD_RS, BitPos(LCD_RS+0)
0x007D	0x2880      	GOTO       L__Lcd_Cmd30
L__Lcd_Cmd29:
0x007E	0x1303      	BCF        STATUS, 6
0x007F	0x1207      	BCF        LCD_RS, BitPos(LCD_RS+0)
L__Lcd_Cmd30:
;__Lib_Lcd.c,28 :: 		
0x0080	0x1687      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,29 :: 		
0x0081	0x203F      	CALL       _Delay_1us
;__Lib_Lcd.c,30 :: 		
0x0082	0x1287      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,33 :: 		
0x0083	0x1703      	BSF        STATUS, 6
0x0084	0x19B0      	BTFSC      FARG_Lcd_Cmd_out_char, 3
0x0085	0x2888      	GOTO       L__Lcd_Cmd31
0x0086	0x1186      	BCF        LCD_D7, BitPos(LCD_D7+0)
0x0087	0x2889      	GOTO       L__Lcd_Cmd32
L__Lcd_Cmd31:
0x0088	0x1586      	BSF        LCD_D7, BitPos(LCD_D7+0)
L__Lcd_Cmd32:
;__Lib_Lcd.c,34 :: 		
0x0089	0x1930      	BTFSC      FARG_Lcd_Cmd_out_char, 2
0x008A	0x288D      	GOTO       L__Lcd_Cmd33
0x008B	0x1106      	BCF        LCD_D6, BitPos(LCD_D6+0)
0x008C	0x288E      	GOTO       L__Lcd_Cmd34
L__Lcd_Cmd33:
0x008D	0x1506      	BSF        LCD_D6, BitPos(LCD_D6+0)
L__Lcd_Cmd34:
;__Lib_Lcd.c,35 :: 		
0x008E	0x18B0      	BTFSC      FARG_Lcd_Cmd_out_char, 1
0x008F	0x2892      	GOTO       L__Lcd_Cmd35
0x0090	0x1086      	BCF        LCD_D5, BitPos(LCD_D5+0)
0x0091	0x2893      	GOTO       L__Lcd_Cmd36
L__Lcd_Cmd35:
0x0092	0x1486      	BSF        LCD_D5, BitPos(LCD_D5+0)
L__Lcd_Cmd36:
;__Lib_Lcd.c,36 :: 		
0x0093	0x1830      	BTFSC      FARG_Lcd_Cmd_out_char, 0
0x0094	0x2898      	GOTO       L__Lcd_Cmd37
0x0095	0x1303      	BCF        STATUS, 6
0x0096	0x1105      	BCF        LCD_D4, BitPos(LCD_D4+0)
0x0097	0x289A      	GOTO       L__Lcd_Cmd38
L__Lcd_Cmd37:
0x0098	0x1303      	BCF        STATUS, 6
0x0099	0x1505      	BSF        LCD_D4, BitPos(LCD_D4+0)
L__Lcd_Cmd38:
;__Lib_Lcd.c,38 :: 		
0x009A	0x1703      	BSF        STATUS, 6
0x009B	0x1820      	BTFSC      __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
0x009C	0x28A0      	GOTO       L__Lcd_Cmd39
0x009D	0x1303      	BCF        STATUS, 6
0x009E	0x1607      	BSF        LCD_RS, BitPos(LCD_RS+0)
0x009F	0x28A2      	GOTO       L__Lcd_Cmd40
L__Lcd_Cmd39:
0x00A0	0x1303      	BCF        STATUS, 6
0x00A1	0x1207      	BCF        LCD_RS, BitPos(LCD_RS+0)
L__Lcd_Cmd40:
;__Lib_Lcd.c,40 :: 		
0x00A2	0x1687      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,41 :: 		
0x00A3	0x203F      	CALL       _Delay_1us
;__Lib_Lcd.c,42 :: 		
0x00A4	0x1287      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,44 :: 		
0x00A5	0x1703      	BSF        STATUS, 6
0x00A6	0x1C20      	BTFSS      __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
0x00A7	0x28AA      	GOTO       L_Lcd_Cmd0
;__Lib_Lcd.c,45 :: 		
0x00A8	0x2049      	CALL       _Delay_5500us
0x00A9	0x28AB      	GOTO       L_Lcd_Cmd1
L_Lcd_Cmd0:
;__Lib_Lcd.c,47 :: 		
0x00AA	0x2042      	CALL       _Delay_50us
L_Lcd_Cmd1:
;__Lib_Lcd.c,48 :: 		
L_end_Lcd_Cmd:
0x00AB	0x0008      	RETURN
; end of _Lcd_Cmd
_Div_16x16_S_L:
;__Lib_Math.c,421 :: 		
;__Lib_Math.c,427 :: 		
0x00AC	0x0D71      	RLF        R1, 0
;__Lib_Math.c,428 :: 		
0x00AD	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,429 :: 		
0x00AE	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,430 :: 		
0x00AF	0x0874      	MOVF       R4, 0
;__Lib_Math.c,431 :: 		
0x00B0	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,432 :: 		
0x00B1	0x0875      	MOVF       R5, 0
;__Lib_Math.c,433 :: 		
0x00B2	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,434 :: 		
0x00B3	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,435 :: 		
0x00B4	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,436 :: 		
0x00B5	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,437 :: 		
0x00B6	0x0DF1      	RLF        R1, 1
;__Lib_Math.c,439 :: 		
0x00B7	0x300F      	MOVLW      15
;__Lib_Math.c,440 :: 		
0x00B8	0x00FC      	MOVWF      R12
;__Lib_Math.c,442 :: 		
0x00B9	0x0D71      	RLF        R1, 0
;__Lib_Math.c,443 :: 		
0x00BA	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,444 :: 		
0x00BB	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,445 :: 		
0x00BC	0x0874      	MOVF       R4, 0
;__Lib_Math.c,447 :: 		
0x00BD	0x1C70      	BTFSS      R0, 0
;__Lib_Math.c,448 :: 		
0x00BE	0x28C5      	GOTO       $+7
;__Lib_Math.c,449 :: 		
0x00BF	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,450 :: 		
0x00C0	0x0875      	MOVF       R5, 0
;__Lib_Math.c,451 :: 		
0x00C1	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,452 :: 		
0x00C2	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,453 :: 		
0x00C3	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,454 :: 		
0x00C4	0x28CA      	GOTO       $+6
;__Lib_Math.c,456 :: 		
0x00C5	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,457 :: 		
0x00C6	0x0875      	MOVF       R5, 0
;__Lib_Math.c,458 :: 		
0x00C7	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,459 :: 		
0x00C8	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,460 :: 		
0x00C9	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,462 :: 		
0x00CA	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,463 :: 		
0x00CB	0x0DF1      	RLF        R1, 1
;__Lib_Math.c,465 :: 		
0x00CC	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,466 :: 		
0x00CD	0x28B9      	GOTO       $-20
;__Lib_Math.c,468 :: 		
0x00CE	0x1870      	BTFSC      R0, 0
;__Lib_Math.c,469 :: 		
0x00CF	0x28D6      	GOTO       $+7
;__Lib_Math.c,470 :: 		
0x00D0	0x0874      	MOVF       R4, 0
;__Lib_Math.c,471 :: 		
0x00D1	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,472 :: 		
0x00D2	0x0875      	MOVF       R5, 0
;__Lib_Math.c,473 :: 		
0x00D3	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,474 :: 		
0x00D4	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,475 :: 		
0x00D5	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,476 :: 		
0x00D6	0x0000      	NOP
;__Lib_Math.c,478 :: 		
L_end_Div_16x16_S_L:
0x00D7	0x0008      	RETURN
; end of _Div_16x16_S_L
_Move_D:
;ACB_2.c,218 :: 		void Move_D(unsigned char dir, unsigned int steps) {
;ACB_2.c,220 :: 		if (dir == 0)
0x00D8	0x1283      	BCF        STATUS, 5
0x00D9	0x1703      	BSF        STATUS, 6
0x00DA	0x082B      	MOVF       FARG_Move_D_dir, 0
0x00DB	0x3A00      	XORLW      0
0x00DC	0x1D03      	BTFSS      STATUS, 2
0x00DD	0x28E1      	GOTO       L_Move_D40
;ACB_2.c,221 :: 		PORTC = 0x00; // Dir_Y (RC3) = 0, Dir_X (RC1) = 0 (bottom left)
0x00DE	0x1303      	BCF        STATUS, 6
0x00DF	0x0187      	CLRF       PORTC
0x00E0	0x28FB      	GOTO       L_Move_D41
L_Move_D40:
;ACB_2.c,222 :: 		else if (dir == 1)
0x00E1	0x1703      	BSF        STATUS, 6
0x00E2	0x082B      	MOVF       FARG_Move_D_dir, 0
0x00E3	0x3A01      	XORLW      1
0x00E4	0x1D03      	BTFSS      STATUS, 2
0x00E5	0x28EA      	GOTO       L_Move_D42
;ACB_2.c,223 :: 		PORTC = 0x02; // Dir_Y (RC3) = 0, Dir_X (RC1) = 1 (bottom right)
0x00E6	0x3002      	MOVLW      2
0x00E7	0x1303      	BCF        STATUS, 6
0x00E8	0x0087      	MOVWF      PORTC
0x00E9	0x28FB      	GOTO       L_Move_D43
L_Move_D42:
;ACB_2.c,224 :: 		else if (dir == 2)
0x00EA	0x1703      	BSF        STATUS, 6
0x00EB	0x082B      	MOVF       FARG_Move_D_dir, 0
0x00EC	0x3A02      	XORLW      2
0x00ED	0x1D03      	BTFSS      STATUS, 2
0x00EE	0x28F3      	GOTO       L_Move_D44
;ACB_2.c,225 :: 		PORTC = 0x08; // Dir_Y (RC3) = 1, Dir_X (RC1) = 0 (top left)
0x00EF	0x3008      	MOVLW      8
0x00F0	0x1303      	BCF        STATUS, 6
0x00F1	0x0087      	MOVWF      PORTC
0x00F2	0x28FB      	GOTO       L_Move_D45
L_Move_D44:
;ACB_2.c,226 :: 		else if (dir == 3)
0x00F3	0x1703      	BSF        STATUS, 6
0x00F4	0x082B      	MOVF       FARG_Move_D_dir, 0
0x00F5	0x3A03      	XORLW      3
0x00F6	0x1D03      	BTFSS      STATUS, 2
0x00F7	0x28FB      	GOTO       L_Move_D46
;ACB_2.c,227 :: 		PORTC = 0x0A; // Dir_Y (RC3) = 1, Dir_X (RC1) = 1 (top right)
0x00F8	0x300A      	MOVLW      10
0x00F9	0x1303      	BCF        STATUS, 6
0x00FA	0x0087      	MOVWF      PORTC
L_Move_D46:
L_Move_D45:
L_Move_D43:
L_Move_D41:
0x00FB	0x1303      	BCF        STATUS, 6
;ACB_2.c,229 :: 		PORTE = PORTE & 0xFC; // EN_X (RE0) = 0, EN_Y (RE1) = 0 (Enable X & Y motors)
0x00FC	0x30FC      	MOVLW      252
0x00FD	0x0589      	ANDWF      PORTE, 1
;ACB_2.c,231 :: 		for (j = 0; j < steps; j++) {
0x00FE	0x1703      	BSF        STATUS, 6
0x00FF	0x01AE      	CLRF       Move_D_j_L0
0x0100	0x01AF      	CLRF       Move_D_j_L0+1
L_Move_D47:
0x0101	0x082D      	MOVF       FARG_Move_D_steps+1, 0
0x0102	0x022F      	SUBWF      Move_D_j_L0+1, 0
0x0103	0x1D03      	BTFSS      STATUS, 2
0x0104	0x2907      	GOTO       L__Move_D127
0x0105	0x082C      	MOVF       FARG_Move_D_steps, 0
0x0106	0x022E      	SUBWF      Move_D_j_L0, 0
L__Move_D127:
0x0107	0x1803      	BTFSC      STATUS, 0
0x0108	0x2917      	GOTO       L_Move_D48
;ACB_2.c,232 :: 		PORTC = PORTC & 0xFA; // Step_X (RC0) = 0, Step_Y (RC2) = 0
0x0109	0x30FA      	MOVLW      250
0x010A	0x1303      	BCF        STATUS, 6
0x010B	0x0587      	ANDWF      PORTC, 1
;ACB_2.c,233 :: 		MotorDelay();
0x010C	0x2056      	CALL       _MotorDelay
;ACB_2.c,234 :: 		PORTC = PORTC | 0x05; // Step_X (RC0) = 1, Step_Y (RC2) = 1
0x010D	0x3005      	MOVLW      5
0x010E	0x1283      	BCF        STATUS, 5
0x010F	0x0487      	IORWF      PORTC, 1
;ACB_2.c,235 :: 		MotorDelay();
0x0110	0x2056      	CALL       _MotorDelay
;ACB_2.c,231 :: 		for (j = 0; j < steps; j++) {
0x0111	0x1283      	BCF        STATUS, 5
0x0112	0x1703      	BSF        STATUS, 6
0x0113	0x0AAE      	INCF       Move_D_j_L0, 1
0x0114	0x1903      	BTFSC      STATUS, 2
0x0115	0x0AAF      	INCF       Move_D_j_L0+1, 1
;ACB_2.c,236 :: 		}
0x0116	0x2901      	GOTO       L_Move_D47
L_Move_D48:
;ACB_2.c,238 :: 		PORTE = PORTE | 0x03; // Disable all motors
0x0117	0x3003      	MOVLW      3
0x0118	0x1303      	BCF        STATUS, 6
0x0119	0x0489      	IORWF      PORTE, 1
;ACB_2.c,239 :: 		}
L_end_Move_D:
0x011A	0x0008      	RETURN
; end of _Move_D
_abs:
;__Lib_CStdlib.c,37 :: 		
;__Lib_CStdlib.c,38 :: 		
0x011B	0x3080      	MOVLW      128
0x011C	0x1283      	BCF        STATUS, 5
0x011D	0x1703      	BSF        STATUS, 6
0x011E	0x062C      	XORWF      FARG_abs_a+1, 0
0x011F	0x00F0      	MOVWF      R0
0x0120	0x3080      	MOVLW      128
0x0121	0x0270      	SUBWF      R0, 0
0x0122	0x1D03      	BTFSS      STATUS, 2
0x0123	0x2926      	GOTO       L__abs93
0x0124	0x3000      	MOVLW      0
0x0125	0x022B      	SUBWF      FARG_abs_a, 0
L__abs93:
0x0126	0x1803      	BTFSC      STATUS, 0
0x0127	0x2931      	GOTO       L_abs0
;__Lib_CStdlib.c,39 :: 		
0x0128	0x082B      	MOVF       FARG_abs_a, 0
0x0129	0x3C00      	SUBLW      0
0x012A	0x00F0      	MOVWF      R0
0x012B	0x082C      	MOVF       FARG_abs_a+1, 0
0x012C	0x1C03      	BTFSS      STATUS, 0
0x012D	0x3E01      	ADDLW      1
0x012E	0x01F1      	CLRF       R0+1
0x012F	0x02F1      	SUBWF      R0+1, 1
0x0130	0x2935      	GOTO       L_end_abs
L_abs0:
;__Lib_CStdlib.c,40 :: 		
0x0131	0x082B      	MOVF       FARG_abs_a, 0
0x0132	0x00F0      	MOVWF      R0
0x0133	0x082C      	MOVF       FARG_abs_a+1, 0
0x0134	0x00F1      	MOVWF      R0+1
;__Lib_CStdlib.c,41 :: 		
L_end_abs:
0x0135	0x0008      	RETURN
; end of _abs
_Move_X:
;ACB_2.c,180 :: 		void Move_X(unsigned char dir, unsigned int steps) {
;ACB_2.c,182 :: 		if (dir)
0x0136	0x1283      	BCF        STATUS, 5
0x0137	0x1703      	BSF        STATUS, 6
0x0138	0x082B      	MOVF       FARG_Move_X_dir, 0
0x0139	0x1903      	BTFSC      STATUS, 2
0x013A	0x293F      	GOTO       L_Move_X30
;ACB_2.c,183 :: 		PORTC = 0x02; // Dir_X (RC1) = 1 (right)
0x013B	0x3002      	MOVLW      2
0x013C	0x1303      	BCF        STATUS, 6
0x013D	0x0087      	MOVWF      PORTC
0x013E	0x2941      	GOTO       L_Move_X31
L_Move_X30:
0x013F	0x1303      	BCF        STATUS, 6
;ACB_2.c,185 :: 		PORTC = 0x00; // Dir_X (RC1) = 0 (left)
0x0140	0x0187      	CLRF       PORTC
L_Move_X31:
;ACB_2.c,187 :: 		PORTE = PORTE & 0xFE; // EN_X (RE0) = 0 (Enable X motor)
0x0141	0x30FE      	MOVLW      254
0x0142	0x0589      	ANDWF      PORTE, 1
;ACB_2.c,189 :: 		for (j = 0; j < steps; j++) {
0x0143	0x1703      	BSF        STATUS, 6
0x0144	0x01AE      	CLRF       Move_X_j_L0
0x0145	0x01AF      	CLRF       Move_X_j_L0+1
L_Move_X32:
0x0146	0x082D      	MOVF       FARG_Move_X_steps+1, 0
0x0147	0x022F      	SUBWF      Move_X_j_L0+1, 0
0x0148	0x1D03      	BTFSS      STATUS, 2
0x0149	0x294C      	GOTO       L__Move_X123
0x014A	0x082C      	MOVF       FARG_Move_X_steps, 0
0x014B	0x022E      	SUBWF      Move_X_j_L0, 0
L__Move_X123:
0x014C	0x1803      	BTFSC      STATUS, 0
0x014D	0x295B      	GOTO       L_Move_X33
;ACB_2.c,190 :: 		PORTC = PORTC & 0xFE; // Step_X (RC0) = 0
0x014E	0x30FE      	MOVLW      254
0x014F	0x1303      	BCF        STATUS, 6
0x0150	0x0587      	ANDWF      PORTC, 1
;ACB_2.c,191 :: 		MotorDelay();
0x0151	0x2056      	CALL       _MotorDelay
;ACB_2.c,192 :: 		PORTC = PORTC | 0x01; // Step_X (RC0) = 1
0x0152	0x1283      	BCF        STATUS, 5
0x0153	0x1407      	BSF        PORTC, 0
;ACB_2.c,193 :: 		MotorDelay();
0x0154	0x2056      	CALL       _MotorDelay
;ACB_2.c,189 :: 		for (j = 0; j < steps; j++) {
0x0155	0x1283      	BCF        STATUS, 5
0x0156	0x1703      	BSF        STATUS, 6
0x0157	0x0AAE      	INCF       Move_X_j_L0, 1
0x0158	0x1903      	BTFSC      STATUS, 2
0x0159	0x0AAF      	INCF       Move_X_j_L0+1, 1
;ACB_2.c,194 :: 		}
0x015A	0x2946      	GOTO       L_Move_X32
L_Move_X33:
;ACB_2.c,196 :: 		PORTE = PORTE | 0x03; // Disable all motors
0x015B	0x3003      	MOVLW      3
0x015C	0x1303      	BCF        STATUS, 6
0x015D	0x0489      	IORWF      PORTE, 1
;ACB_2.c,197 :: 		}
L_end_Move_X:
0x015E	0x0008      	RETURN
; end of _Move_X
_Move_Y:
;ACB_2.c,199 :: 		void Move_Y(unsigned char dir, unsigned int steps) {
;ACB_2.c,201 :: 		if (dir)
0x015F	0x1283      	BCF        STATUS, 5
0x0160	0x1703      	BSF        STATUS, 6
0x0161	0x082B      	MOVF       FARG_Move_Y_dir, 0
0x0162	0x1903      	BTFSC      STATUS, 2
0x0163	0x2968      	GOTO       L_Move_Y35
;ACB_2.c,202 :: 		PORTC = 0x08; // Dir_Y (RC3) = 1 (up)
0x0164	0x3008      	MOVLW      8
0x0165	0x1303      	BCF        STATUS, 6
0x0166	0x0087      	MOVWF      PORTC
0x0167	0x296A      	GOTO       L_Move_Y36
L_Move_Y35:
0x0168	0x1303      	BCF        STATUS, 6
;ACB_2.c,204 :: 		PORTC = 0x00; // Dir_Y (RC3) = 0 (down)
0x0169	0x0187      	CLRF       PORTC
L_Move_Y36:
;ACB_2.c,206 :: 		PORTE = PORTE & 0xFD; // EN_Y (RE1) = 0 (Enable Y motor)
0x016A	0x30FD      	MOVLW      253
0x016B	0x0589      	ANDWF      PORTE, 1
;ACB_2.c,208 :: 		for (j = 0; j < steps; j++) {
0x016C	0x1703      	BSF        STATUS, 6
0x016D	0x01AE      	CLRF       Move_Y_j_L0
0x016E	0x01AF      	CLRF       Move_Y_j_L0+1
L_Move_Y37:
0x016F	0x082D      	MOVF       FARG_Move_Y_steps+1, 0
0x0170	0x022F      	SUBWF      Move_Y_j_L0+1, 0
0x0171	0x1D03      	BTFSS      STATUS, 2
0x0172	0x2975      	GOTO       L__Move_Y125
0x0173	0x082C      	MOVF       FARG_Move_Y_steps, 0
0x0174	0x022E      	SUBWF      Move_Y_j_L0, 0
L__Move_Y125:
0x0175	0x1803      	BTFSC      STATUS, 0
0x0176	0x2984      	GOTO       L_Move_Y38
;ACB_2.c,209 :: 		PORTC = PORTC & 0xFB; // Step_Y (RC2) = 0
0x0177	0x30FB      	MOVLW      251
0x0178	0x1303      	BCF        STATUS, 6
0x0179	0x0587      	ANDWF      PORTC, 1
;ACB_2.c,210 :: 		MotorDelay();
0x017A	0x2056      	CALL       _MotorDelay
;ACB_2.c,211 :: 		PORTC = PORTC | 0x04; // Step_Y (RC2) = 1
0x017B	0x1283      	BCF        STATUS, 5
0x017C	0x1507      	BSF        PORTC, 2
;ACB_2.c,212 :: 		MotorDelay();
0x017D	0x2056      	CALL       _MotorDelay
;ACB_2.c,208 :: 		for (j = 0; j < steps; j++) {
0x017E	0x1283      	BCF        STATUS, 5
0x017F	0x1703      	BSF        STATUS, 6
0x0180	0x0AAE      	INCF       Move_Y_j_L0, 1
0x0181	0x1903      	BTFSC      STATUS, 2
0x0182	0x0AAF      	INCF       Move_Y_j_L0+1, 1
;ACB_2.c,213 :: 		}
0x0183	0x296F      	GOTO       L_Move_Y37
L_Move_Y38:
;ACB_2.c,215 :: 		PORTE = PORTE | 0x03; // Disable all motors
0x0184	0x3003      	MOVLW      3
0x0185	0x1303      	BCF        STATUS, 6
0x0186	0x0489      	IORWF      PORTE, 1
;ACB_2.c,216 :: 		}
L_end_Move_Y:
0x0187	0x0008      	RETURN
; end of _Move_Y
_Lcd_Chr_CP:
;__Lib_Lcd.c,50 :: 		
;__Lib_Lcd.c,52 :: 		
0x0188	0x1283      	BCF        STATUS, 5
0x0189	0x1703      	BSF        STATUS, 6
0x018A	0x1020      	BCF        __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
;__Lib_Lcd.c,53 :: 		
0x018B	0x082B      	MOVF       FARG_Lcd_Chr_CP_out_char, 0
0x018C	0x00B0      	MOVWF      FARG_Lcd_Cmd_out_char
0x018D	0x2060      	CALL       _Lcd_Cmd
;__Lib_Lcd.c,54 :: 		
0x018E	0x1703      	BSF        STATUS, 6
0x018F	0x1420      	BSF        __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
;__Lib_Lcd.c,55 :: 		
L_end_Lcd_Chr_CP:
0x0190	0x0008      	RETURN
; end of _Lcd_Chr_CP
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x0191	0x1283      	BCF        STATUS, 5
0x0192	0x1703      	BSF        STATUS, 6
0x0193	0x081B      	MOVF       ___DoICPAddr+1, 0
0x0194	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x0195	0x081A      	MOVF       ___DoICPAddr, 0
0x0196	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x0197	0x0008      	RETURN
; end of _____DoICP
_Move_Home:
;ACB_2.c,243 :: 		void Move_Home() {
;ACB_2.c,244 :: 		while (1) {
L_Move_Home50:
;ACB_2.c,245 :: 		if (!(PORTB & 0x10) && !(PORTB & 0X20)) { // Both Switches not hit
0x0198	0x1283      	BCF        STATUS, 5
0x0199	0x1303      	BCF        STATUS, 6
0x019A	0x1A06      	BTFSC      PORTB, 4
0x019B	0x29A6      	GOTO       L_Move_Home54
0x019C	0x1A86      	BTFSC      PORTB, 5
0x019D	0x29A6      	GOTO       L_Move_Home54
L__Move_Home111:
;ACB_2.c,246 :: 		Move_D(0, 300);
0x019E	0x1703      	BSF        STATUS, 6
0x019F	0x01AB      	CLRF       FARG_Move_D_dir
0x01A0	0x302C      	MOVLW      44
0x01A1	0x00AC      	MOVWF      FARG_Move_D_steps
0x01A2	0x3001      	MOVLW      1
0x01A3	0x00AD      	MOVWF      FARG_Move_D_steps+1
0x01A4	0x20D8      	CALL       _Move_D
;ACB_2.c,247 :: 		} else if (!(PORTB & 0x10)) // RB4 == 0
0x01A5	0x29BF      	GOTO       L_Move_Home55
L_Move_Home54:
0x01A6	0x1A06      	BTFSC      PORTB, 4
0x01A7	0x29B0      	GOTO       L_Move_Home56
;ACB_2.c,248 :: 		Move_X(0, 300);
0x01A8	0x1703      	BSF        STATUS, 6
0x01A9	0x01AB      	CLRF       FARG_Move_X_dir
0x01AA	0x302C      	MOVLW      44
0x01AB	0x00AC      	MOVWF      FARG_Move_X_steps
0x01AC	0x3001      	MOVLW      1
0x01AD	0x00AD      	MOVWF      FARG_Move_X_steps+1
0x01AE	0x2136      	CALL       _Move_X
0x01AF	0x29BF      	GOTO       L_Move_Home57
L_Move_Home56:
;ACB_2.c,249 :: 		else if (!(PORTB & 0X20)) // RB5 == 0
0x01B0	0x1A86      	BTFSC      PORTB, 5
0x01B1	0x29BA      	GOTO       L_Move_Home58
;ACB_2.c,250 :: 		Move_Y(0, 300);
0x01B2	0x1703      	BSF        STATUS, 6
0x01B3	0x01AB      	CLRF       FARG_Move_Y_dir
0x01B4	0x302C      	MOVLW      44
0x01B5	0x00AC      	MOVWF      FARG_Move_Y_steps
0x01B6	0x3001      	MOVLW      1
0x01B7	0x00AD      	MOVWF      FARG_Move_Y_steps+1
0x01B8	0x215F      	CALL       _Move_Y
0x01B9	0x29BF      	GOTO       L_Move_Home59
L_Move_Home58:
;ACB_2.c,251 :: 		else if ((PORTB & 0x10) && (PORTB & 0x20))
0x01BA	0x1E06      	BTFSS      PORTB, 4
0x01BB	0x29BF      	GOTO       L_Move_Home62
0x01BC	0x1E86      	BTFSS      PORTB, 5
0x01BD	0x29BF      	GOTO       L_Move_Home62
L__Move_Home110:
;ACB_2.c,252 :: 		break;
0x01BE	0x29C0      	GOTO       L_Move_Home51
L_Move_Home62:
L_Move_Home59:
L_Move_Home57:
L_Move_Home55:
;ACB_2.c,253 :: 		}
0x01BF	0x2998      	GOTO       L_Move_Home50
L_Move_Home51:
;ACB_2.c,254 :: 		Move_X(1, home_X);
0x01C0	0x3001      	MOVLW      1
0x01C1	0x1703      	BSF        STATUS, 6
0x01C2	0x00AB      	MOVWF      FARG_Move_X_dir
0x01C3	0x308C      	MOVLW      140
0x01C4	0x00AC      	MOVWF      FARG_Move_X_steps
0x01C5	0x3000      	MOVLW      0
0x01C6	0x00AD      	MOVWF      FARG_Move_X_steps+1
0x01C7	0x2136      	CALL       _Move_X
;ACB_2.c,255 :: 		}
L_end_Move_Home:
0x01C8	0x0008      	RETURN
; end of _Move_Home
_Lcd_Out:
;__Lib_Lcd.c,184 :: 		
;__Lib_Lcd.c,187 :: 		
0x01C9	0x29DB      	GOTO       L_Lcd_Out11
;__Lib_Lcd.c,188 :: 		
L_Lcd_Out13:
0x01CA	0x3080      	MOVLW      128
0x01CB	0x1283      	BCF        STATUS, 5
0x01CC	0x1703      	BSF        STATUS, 6
0x01CD	0x00A7      	MOVWF      FARG_Lcd_Out_row
0x01CE	0x29EE      	GOTO       L_Lcd_Out12
;__Lib_Lcd.c,189 :: 		
L_Lcd_Out14:
0x01CF	0x30C0      	MOVLW      192
0x01D0	0x00A7      	MOVWF      FARG_Lcd_Out_row
0x01D1	0x29EE      	GOTO       L_Lcd_Out12
;__Lib_Lcd.c,190 :: 		
L_Lcd_Out15:
0x01D2	0x3094      	MOVLW      148
0x01D3	0x00A7      	MOVWF      FARG_Lcd_Out_row
0x01D4	0x29EE      	GOTO       L_Lcd_Out12
;__Lib_Lcd.c,191 :: 		
L_Lcd_Out16:
0x01D5	0x30D4      	MOVLW      212
0x01D6	0x00A7      	MOVWF      FARG_Lcd_Out_row
0x01D7	0x29EE      	GOTO       L_Lcd_Out12
;__Lib_Lcd.c,192 :: 		
L_Lcd_Out17:
0x01D8	0x3080      	MOVLW      128
0x01D9	0x00A7      	MOVWF      FARG_Lcd_Out_row
;__Lib_Lcd.c,193 :: 		
0x01DA	0x29EE      	GOTO       L_Lcd_Out12
L_Lcd_Out11:
0x01DB	0x1283      	BCF        STATUS, 5
0x01DC	0x1703      	BSF        STATUS, 6
0x01DD	0x0827      	MOVF       FARG_Lcd_Out_row, 0
0x01DE	0x3A01      	XORLW      1
0x01DF	0x1903      	BTFSC      STATUS, 2
0x01E0	0x29CA      	GOTO       L_Lcd_Out13
0x01E1	0x0827      	MOVF       FARG_Lcd_Out_row, 0
0x01E2	0x3A02      	XORLW      2
0x01E3	0x1903      	BTFSC      STATUS, 2
0x01E4	0x29CF      	GOTO       L_Lcd_Out14
0x01E5	0x0827      	MOVF       FARG_Lcd_Out_row, 0
0x01E6	0x3A03      	XORLW      3
0x01E7	0x1903      	BTFSC      STATUS, 2
0x01E8	0x29D2      	GOTO       L_Lcd_Out15
0x01E9	0x0827      	MOVF       FARG_Lcd_Out_row, 0
0x01EA	0x3A04      	XORLW      4
0x01EB	0x1903      	BTFSC      STATUS, 2
0x01EC	0x29D5      	GOTO       L_Lcd_Out16
0x01ED	0x29D8      	GOTO       L_Lcd_Out17
L_Lcd_Out12:
;__Lib_Lcd.c,194 :: 		
0x01EE	0x0328      	DECF       FARG_Lcd_Out_column, 0
0x01EF	0x00F0      	MOVWF      R0
0x01F0	0x0827      	MOVF       FARG_Lcd_Out_row, 0
0x01F1	0x07F0      	ADDWF      R0, 1
0x01F2	0x0870      	MOVF       R0, 0
0x01F3	0x00A7      	MOVWF      FARG_Lcd_Out_row
;__Lib_Lcd.c,196 :: 		
0x01F4	0x0870      	MOVF       R0, 0
0x01F5	0x00B0      	MOVWF      FARG_Lcd_Cmd_out_char
0x01F6	0x2060      	CALL       _Lcd_Cmd
;__Lib_Lcd.c,197 :: 		
0x01F7	0x1703      	BSF        STATUS, 6
0x01F8	0x1020      	BCF        __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
;__Lib_Lcd.c,198 :: 		
0x01F9	0x01AA      	CLRF       Lcd_Out_i_L0
;__Lib_Lcd.c,199 :: 		
L_Lcd_Out18:
0x01FA	0x082A      	MOVF       Lcd_Out_i_L0, 0
0x01FB	0x0729      	ADDWF      FARG_Lcd_Out_text, 0
0x01FC	0x0084      	MOVWF      FSR
0x01FD	0x0800      	MOVF       INDF, 0
0x01FE	0x1903      	BTFSC      STATUS, 2
0x01FF	0x2A08      	GOTO       L_Lcd_Out19
;__Lib_Lcd.c,200 :: 		
0x0200	0x082A      	MOVF       Lcd_Out_i_L0, 0
0x0201	0x0729      	ADDWF      FARG_Lcd_Out_text, 0
0x0202	0x0084      	MOVWF      FSR
0x0203	0x0800      	MOVF       INDF, 0
0x0204	0x00AB      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0205	0x2188      	CALL       _Lcd_Chr_CP
0x0206	0x0AAA      	INCF       Lcd_Out_i_L0, 1
0x0207	0x29FA      	GOTO       L_Lcd_Out18
L_Lcd_Out19:
;__Lib_Lcd.c,201 :: 		
0x0208	0x1420      	BSF        __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
;__Lib_Lcd.c,202 :: 		
L_end_Lcd_Out:
0x0209	0x0008      	RETURN
; end of _Lcd_Out
_ATD_read:
;ACB_2.c,386 :: 		unsigned char ATD_read(void){
;ACB_2.c,387 :: 		ADCON0 = ADCON0 | 0x04;// GO
0x020A	0x1283      	BCF        STATUS, 5
0x020B	0x1303      	BCF        STATUS, 6
0x020C	0x151F      	BSF        ADCON0, 2
;ACB_2.c,388 :: 		while(ADCON0 & 0x04);
L_ATD_read105:
0x020D	0x1D1F      	BTFSS      ADCON0, 2
0x020E	0x2A10      	GOTO       L_ATD_read106
0x020F	0x2A0D      	GOTO       L_ATD_read105
L_ATD_read106:
;ACB_2.c,389 :: 		return ADRESH;
0x0210	0x081E      	MOVF       ADRESH, 0
0x0211	0x00F0      	MOVWF      R0
;ACB_2.c,390 :: 		}
L_end_ATD_read:
0x0212	0x0008      	RETURN
; end of _ATD_read
_Move:
;ACB_2.c,270 :: 		void Move(char startx, char starty, char endx, char endy) {
;ACB_2.c,271 :: 		if ((endx - startx) == (endy - starty)) { // Move is diagonal
0x0213	0x1283      	BCF        STATUS, 5
0x0214	0x1703      	BSF        STATUS, 6
0x0215	0x0827      	MOVF       FARG_Move_startx, 0
0x0216	0x0229      	SUBWF      FARG_Move_endx, 0
0x0217	0x00F3      	MOVWF      R3
0x0218	0x01F4      	CLRF       R3+1
0x0219	0x1C03      	BTFSS      STATUS, 0
0x021A	0x03F4      	DECF       R3+1, 1
0x021B	0x0828      	MOVF       FARG_Move_starty, 0
0x021C	0x022A      	SUBWF      FARG_Move_endy, 0
0x021D	0x00F1      	MOVWF      R1
0x021E	0x01F2      	CLRF       R1+1
0x021F	0x1C03      	BTFSS      STATUS, 0
0x0220	0x03F2      	DECF       R1+1, 1
0x0221	0x0874      	MOVF       R3+1, 0
0x0222	0x0672      	XORWF      R1+1, 0
0x0223	0x1D03      	BTFSS      STATUS, 2
0x0224	0x2A27      	GOTO       L__Move132
0x0225	0x0871      	MOVF       R1, 0
0x0226	0x0673      	XORWF      R3, 0
L__Move132:
0x0227	0x1D03      	BTFSS      STATUS, 2
0x0228	0x2ADF      	GOTO       L_Move65
;ACB_2.c,272 :: 		step_count = abs(endy - starty);
0x0229	0x0828      	MOVF       FARG_Move_starty, 0
0x022A	0x022A      	SUBWF      FARG_Move_endy, 0
0x022B	0x00AB      	MOVWF      FARG_abs_a
0x022C	0x01AC      	CLRF       FARG_abs_a+1
0x022D	0x1C03      	BTFSS      STATUS, 0
0x022E	0x03AC      	DECF       FARG_abs_a+1, 1
0x022F	0x211B      	CALL       _abs
0x0230	0x0870      	MOVF       R0, 0
0x0231	0x1683      	BSF        STATUS, 5
0x0232	0x1303      	BCF        STATUS, 6
0x0233	0x00ED      	MOVWF      _step_count
0x0234	0x0871      	MOVF       R0+1, 0
0x0235	0x00EE      	MOVWF      _step_count+1
;ACB_2.c,273 :: 		if (endx > startx && endy > starty) // Up, right
0x0236	0x1283      	BCF        STATUS, 5
0x0237	0x1703      	BSF        STATUS, 6
0x0238	0x0829      	MOVF       FARG_Move_endx, 0
0x0239	0x0227      	SUBWF      FARG_Move_startx, 0
0x023A	0x1803      	BTFSC      STATUS, 0
0x023B	0x2A62      	GOTO       L_Move68
0x023C	0x082A      	MOVF       FARG_Move_endy, 0
0x023D	0x0228      	SUBWF      FARG_Move_starty, 0
0x023E	0x1803      	BTFSC      STATUS, 0
0x023F	0x2A62      	GOTO       L_Move68
L__Move115:
;ACB_2.c,275 :: 		k = step_count;
0x0240	0x1683      	BSF        STATUS, 5
0x0241	0x1303      	BCF        STATUS, 6
0x0242	0x086D      	MOVF       _step_count, 0
0x0243	0x1283      	BCF        STATUS, 5
0x0244	0x1703      	BSF        STATUS, 6
0x0245	0x0098      	MOVWF      _k
0x0246	0x1683      	BSF        STATUS, 5
0x0247	0x1303      	BCF        STATUS, 6
0x0248	0x086E      	MOVF       _step_count+1, 0
0x0249	0x1283      	BCF        STATUS, 5
0x024A	0x1703      	BSF        STATUS, 6
0x024B	0x0099      	MOVWF      _k+1
;ACB_2.c,276 :: 		while (k > 0) {
L_Move69:
0x024C	0x0819      	MOVF       _k+1, 0
0x024D	0x3C00      	SUBLW      0
0x024E	0x1D03      	BTFSS      STATUS, 2
0x024F	0x2A52      	GOTO       L__Move133
0x0250	0x0818      	MOVF       _k, 0
0x0251	0x3C00      	SUBLW      0
L__Move133:
0x0252	0x1803      	BTFSC      STATUS, 0
0x0253	0x2A61      	GOTO       L_Move70
;ACB_2.c,277 :: 		Move_D(3, Square_Size);
0x0254	0x3003      	MOVLW      3
0x0255	0x00AB      	MOVWF      FARG_Move_D_dir
0x0256	0x30FA      	MOVLW      250
0x0257	0x00AC      	MOVWF      FARG_Move_D_steps
0x0258	0x3000      	MOVLW      0
0x0259	0x00AD      	MOVWF      FARG_Move_D_steps+1
0x025A	0x20D8      	CALL       _Move_D
;ACB_2.c,278 :: 		k--;
0x025B	0x3001      	MOVLW      1
0x025C	0x1703      	BSF        STATUS, 6
0x025D	0x0298      	SUBWF      _k, 1
0x025E	0x1C03      	BTFSS      STATUS, 0
0x025F	0x0399      	DECF       _k+1, 1
;ACB_2.c,279 :: 		}
0x0260	0x2A4C      	GOTO       L_Move69
L_Move70:
;ACB_2.c,280 :: 		} else if (endx > startx && starty > endy) // Down, right
0x0261	0x2ADE      	GOTO       L_Move71
L_Move68:
0x0262	0x0829      	MOVF       FARG_Move_endx, 0
0x0263	0x0227      	SUBWF      FARG_Move_startx, 0
0x0264	0x1803      	BTFSC      STATUS, 0
0x0265	0x2A8C      	GOTO       L_Move74
0x0266	0x0828      	MOVF       FARG_Move_starty, 0
0x0267	0x022A      	SUBWF      FARG_Move_endy, 0
0x0268	0x1803      	BTFSC      STATUS, 0
0x0269	0x2A8C      	GOTO       L_Move74
L__Move114:
;ACB_2.c,282 :: 		k = step_count;
0x026A	0x1683      	BSF        STATUS, 5
0x026B	0x1303      	BCF        STATUS, 6
0x026C	0x086D      	MOVF       _step_count, 0
0x026D	0x1283      	BCF        STATUS, 5
0x026E	0x1703      	BSF        STATUS, 6
0x026F	0x0098      	MOVWF      _k
0x0270	0x1683      	BSF        STATUS, 5
0x0271	0x1303      	BCF        STATUS, 6
0x0272	0x086E      	MOVF       _step_count+1, 0
0x0273	0x1283      	BCF        STATUS, 5
0x0274	0x1703      	BSF        STATUS, 6
0x0275	0x0099      	MOVWF      _k+1
;ACB_2.c,283 :: 		while (k > 0) {
L_Move75:
0x0276	0x0819      	MOVF       _k+1, 0
0x0277	0x3C00      	SUBLW      0
0x0278	0x1D03      	BTFSS      STATUS, 2
0x0279	0x2A7C      	GOTO       L__Move134
0x027A	0x0818      	MOVF       _k, 0
0x027B	0x3C00      	SUBLW      0
L__Move134:
0x027C	0x1803      	BTFSC      STATUS, 0
0x027D	0x2A8B      	GOTO       L_Move76
;ACB_2.c,284 :: 		Move_D(1, Square_Size);
0x027E	0x3001      	MOVLW      1
0x027F	0x00AB      	MOVWF      FARG_Move_D_dir
0x0280	0x30FA      	MOVLW      250
0x0281	0x00AC      	MOVWF      FARG_Move_D_steps
0x0282	0x3000      	MOVLW      0
0x0283	0x00AD      	MOVWF      FARG_Move_D_steps+1
0x0284	0x20D8      	CALL       _Move_D
;ACB_2.c,285 :: 		k--;
0x0285	0x3001      	MOVLW      1
0x0286	0x1703      	BSF        STATUS, 6
0x0287	0x0298      	SUBWF      _k, 1
0x0288	0x1C03      	BTFSS      STATUS, 0
0x0289	0x0399      	DECF       _k+1, 1
;ACB_2.c,286 :: 		}
0x028A	0x2A76      	GOTO       L_Move75
L_Move76:
;ACB_2.c,287 :: 		} else if (startx > endx && starty > endy) // Down, left
0x028B	0x2ADE      	GOTO       L_Move77
L_Move74:
0x028C	0x0827      	MOVF       FARG_Move_startx, 0
0x028D	0x0229      	SUBWF      FARG_Move_endx, 0
0x028E	0x1803      	BTFSC      STATUS, 0
0x028F	0x2AB5      	GOTO       L_Move80
0x0290	0x0828      	MOVF       FARG_Move_starty, 0
0x0291	0x022A      	SUBWF      FARG_Move_endy, 0
0x0292	0x1803      	BTFSC      STATUS, 0
0x0293	0x2AB5      	GOTO       L_Move80
L__Move113:
;ACB_2.c,289 :: 		k = step_count;
0x0294	0x1683      	BSF        STATUS, 5
0x0295	0x1303      	BCF        STATUS, 6
0x0296	0x086D      	MOVF       _step_count, 0
0x0297	0x1283      	BCF        STATUS, 5
0x0298	0x1703      	BSF        STATUS, 6
0x0299	0x0098      	MOVWF      _k
0x029A	0x1683      	BSF        STATUS, 5
0x029B	0x1303      	BCF        STATUS, 6
0x029C	0x086E      	MOVF       _step_count+1, 0
0x029D	0x1283      	BCF        STATUS, 5
0x029E	0x1703      	BSF        STATUS, 6
0x029F	0x0099      	MOVWF      _k+1
;ACB_2.c,290 :: 		while (k > 0) {
L_Move81:
0x02A0	0x0819      	MOVF       _k+1, 0
0x02A1	0x3C00      	SUBLW      0
0x02A2	0x1D03      	BTFSS      STATUS, 2
0x02A3	0x2AA6      	GOTO       L__Move135
0x02A4	0x0818      	MOVF       _k, 0
0x02A5	0x3C00      	SUBLW      0
L__Move135:
0x02A6	0x1803      	BTFSC      STATUS, 0
0x02A7	0x2AB4      	GOTO       L_Move82
;ACB_2.c,291 :: 		Move_D(0, Square_Size);
0x02A8	0x01AB      	CLRF       FARG_Move_D_dir
0x02A9	0x30FA      	MOVLW      250
0x02AA	0x00AC      	MOVWF      FARG_Move_D_steps
0x02AB	0x3000      	MOVLW      0
0x02AC	0x00AD      	MOVWF      FARG_Move_D_steps+1
0x02AD	0x20D8      	CALL       _Move_D
;ACB_2.c,292 :: 		k--;
0x02AE	0x3001      	MOVLW      1
0x02AF	0x1703      	BSF        STATUS, 6
0x02B0	0x0298      	SUBWF      _k, 1
0x02B1	0x1C03      	BTFSS      STATUS, 0
0x02B2	0x0399      	DECF       _k+1, 1
;ACB_2.c,293 :: 		}
0x02B3	0x2AA0      	GOTO       L_Move81
L_Move82:
;ACB_2.c,294 :: 		} else if (startx > endx && endy > starty) // Up, left
0x02B4	0x2ADE      	GOTO       L_Move83
L_Move80:
0x02B5	0x0827      	MOVF       FARG_Move_startx, 0
0x02B6	0x0229      	SUBWF      FARG_Move_endx, 0
0x02B7	0x1803      	BTFSC      STATUS, 0
0x02B8	0x2ADE      	GOTO       L_Move86
0x02B9	0x082A      	MOVF       FARG_Move_endy, 0
0x02BA	0x0228      	SUBWF      FARG_Move_starty, 0
0x02BB	0x1803      	BTFSC      STATUS, 0
0x02BC	0x2ADE      	GOTO       L_Move86
L__Move112:
;ACB_2.c,296 :: 		k = step_count;
0x02BD	0x1683      	BSF        STATUS, 5
0x02BE	0x1303      	BCF        STATUS, 6
0x02BF	0x086D      	MOVF       _step_count, 0
0x02C0	0x1283      	BCF        STATUS, 5
0x02C1	0x1703      	BSF        STATUS, 6
0x02C2	0x0098      	MOVWF      _k
0x02C3	0x1683      	BSF        STATUS, 5
0x02C4	0x1303      	BCF        STATUS, 6
0x02C5	0x086E      	MOVF       _step_count+1, 0
0x02C6	0x1283      	BCF        STATUS, 5
0x02C7	0x1703      	BSF        STATUS, 6
0x02C8	0x0099      	MOVWF      _k+1
;ACB_2.c,297 :: 		while (k > 0) {
L_Move87:
0x02C9	0x0819      	MOVF       _k+1, 0
0x02CA	0x3C00      	SUBLW      0
0x02CB	0x1D03      	BTFSS      STATUS, 2
0x02CC	0x2ACF      	GOTO       L__Move136
0x02CD	0x0818      	MOVF       _k, 0
0x02CE	0x3C00      	SUBLW      0
L__Move136:
0x02CF	0x1803      	BTFSC      STATUS, 0
0x02D0	0x2ADE      	GOTO       L_Move88
;ACB_2.c,298 :: 		Move_D(2, Square_Size);
0x02D1	0x3002      	MOVLW      2
0x02D2	0x00AB      	MOVWF      FARG_Move_D_dir
0x02D3	0x30FA      	MOVLW      250
0x02D4	0x00AC      	MOVWF      FARG_Move_D_steps
0x02D5	0x3000      	MOVLW      0
0x02D6	0x00AD      	MOVWF      FARG_Move_D_steps+1
0x02D7	0x20D8      	CALL       _Move_D
;ACB_2.c,299 :: 		k--;
0x02D8	0x3001      	MOVLW      1
0x02D9	0x1703      	BSF        STATUS, 6
0x02DA	0x0298      	SUBWF      _k, 1
0x02DB	0x1C03      	BTFSS      STATUS, 0
0x02DC	0x0399      	DECF       _k+1, 1
;ACB_2.c,300 :: 		}
0x02DD	0x2AC9      	GOTO       L_Move87
L_Move88:
;ACB_2.c,301 :: 		}
L_Move86:
L_Move83:
L_Move77:
L_Move71:
;ACB_2.c,302 :: 		} else { // Move is not diagonal
0x02DE	0x2B89      	GOTO       L_Move89
L_Move65:
;ACB_2.c,303 :: 		step_count = abs(endy - starty);
0x02DF	0x0828      	MOVF       FARG_Move_starty, 0
0x02E0	0x022A      	SUBWF      FARG_Move_endy, 0
0x02E1	0x00AB      	MOVWF      FARG_abs_a
0x02E2	0x01AC      	CLRF       FARG_abs_a+1
0x02E3	0x1C03      	BTFSS      STATUS, 0
0x02E4	0x03AC      	DECF       FARG_abs_a+1, 1
0x02E5	0x211B      	CALL       _abs
0x02E6	0x0870      	MOVF       R0, 0
0x02E7	0x1683      	BSF        STATUS, 5
0x02E8	0x1303      	BCF        STATUS, 6
0x02E9	0x00ED      	MOVWF      _step_count
0x02EA	0x0871      	MOVF       R0+1, 0
0x02EB	0x00EE      	MOVWF      _step_count+1
;ACB_2.c,304 :: 		if (endy > starty) { // Up
0x02EC	0x1283      	BCF        STATUS, 5
0x02ED	0x1703      	BSF        STATUS, 6
0x02EE	0x082A      	MOVF       FARG_Move_endy, 0
0x02EF	0x0228      	SUBWF      FARG_Move_starty, 0
0x02F0	0x1803      	BTFSC      STATUS, 0
0x02F1	0x2B14      	GOTO       L_Move90
;ACB_2.c,305 :: 		k = step_count;
0x02F2	0x1683      	BSF        STATUS, 5
0x02F3	0x1303      	BCF        STATUS, 6
0x02F4	0x086D      	MOVF       _step_count, 0
0x02F5	0x1283      	BCF        STATUS, 5
0x02F6	0x1703      	BSF        STATUS, 6
0x02F7	0x0098      	MOVWF      _k
0x02F8	0x1683      	BSF        STATUS, 5
0x02F9	0x1303      	BCF        STATUS, 6
0x02FA	0x086E      	MOVF       _step_count+1, 0
0x02FB	0x1283      	BCF        STATUS, 5
0x02FC	0x1703      	BSF        STATUS, 6
0x02FD	0x0099      	MOVWF      _k+1
;ACB_2.c,306 :: 		while (k > 0) {
L_Move91:
0x02FE	0x0819      	MOVF       _k+1, 0
0x02FF	0x3C00      	SUBLW      0
0x0300	0x1D03      	BTFSS      STATUS, 2
0x0301	0x2B04      	GOTO       L__Move137
0x0302	0x0818      	MOVF       _k, 0
0x0303	0x3C00      	SUBLW      0
L__Move137:
0x0304	0x1803      	BTFSC      STATUS, 0
0x0305	0x2B13      	GOTO       L_Move92
;ACB_2.c,307 :: 		Move_Y(1, Square_Size);
0x0306	0x3001      	MOVLW      1
0x0307	0x00AB      	MOVWF      FARG_Move_Y_dir
0x0308	0x30FA      	MOVLW      250
0x0309	0x00AC      	MOVWF      FARG_Move_Y_steps
0x030A	0x3000      	MOVLW      0
0x030B	0x00AD      	MOVWF      FARG_Move_Y_steps+1
0x030C	0x215F      	CALL       _Move_Y
;ACB_2.c,308 :: 		k--;
0x030D	0x3001      	MOVLW      1
0x030E	0x1703      	BSF        STATUS, 6
0x030F	0x0298      	SUBWF      _k, 1
0x0310	0x1C03      	BTFSS      STATUS, 0
0x0311	0x0399      	DECF       _k+1, 1
;ACB_2.c,309 :: 		}
0x0312	0x2AFE      	GOTO       L_Move91
L_Move92:
;ACB_2.c,310 :: 		} else { // Down
0x0313	0x2B34      	GOTO       L_Move93
L_Move90:
;ACB_2.c,311 :: 		k = step_count;
0x0314	0x1683      	BSF        STATUS, 5
0x0315	0x1303      	BCF        STATUS, 6
0x0316	0x086D      	MOVF       _step_count, 0
0x0317	0x1283      	BCF        STATUS, 5
0x0318	0x1703      	BSF        STATUS, 6
0x0319	0x0098      	MOVWF      _k
0x031A	0x1683      	BSF        STATUS, 5
0x031B	0x1303      	BCF        STATUS, 6
0x031C	0x086E      	MOVF       _step_count+1, 0
0x031D	0x1283      	BCF        STATUS, 5
0x031E	0x1703      	BSF        STATUS, 6
0x031F	0x0099      	MOVWF      _k+1
;ACB_2.c,312 :: 		while (k > 0) {
L_Move94:
0x0320	0x0819      	MOVF       _k+1, 0
0x0321	0x3C00      	SUBLW      0
0x0322	0x1D03      	BTFSS      STATUS, 2
0x0323	0x2B26      	GOTO       L__Move138
0x0324	0x0818      	MOVF       _k, 0
0x0325	0x3C00      	SUBLW      0
L__Move138:
0x0326	0x1803      	BTFSC      STATUS, 0
0x0327	0x2B34      	GOTO       L_Move95
;ACB_2.c,313 :: 		Move_Y(0, Square_Size);
0x0328	0x01AB      	CLRF       FARG_Move_Y_dir
0x0329	0x30FA      	MOVLW      250
0x032A	0x00AC      	MOVWF      FARG_Move_Y_steps
0x032B	0x3000      	MOVLW      0
0x032C	0x00AD      	MOVWF      FARG_Move_Y_steps+1
0x032D	0x215F      	CALL       _Move_Y
;ACB_2.c,314 :: 		k--;
0x032E	0x3001      	MOVLW      1
0x032F	0x1703      	BSF        STATUS, 6
0x0330	0x0298      	SUBWF      _k, 1
0x0331	0x1C03      	BTFSS      STATUS, 0
0x0332	0x0399      	DECF       _k+1, 1
;ACB_2.c,315 :: 		}
0x0333	0x2B20      	GOTO       L_Move94
L_Move95:
;ACB_2.c,316 :: 		}
L_Move93:
;ACB_2.c,317 :: 		step_count = abs(endx - startx);
0x0334	0x0827      	MOVF       FARG_Move_startx, 0
0x0335	0x0229      	SUBWF      FARG_Move_endx, 0
0x0336	0x00AB      	MOVWF      FARG_abs_a
0x0337	0x01AC      	CLRF       FARG_abs_a+1
0x0338	0x1C03      	BTFSS      STATUS, 0
0x0339	0x03AC      	DECF       FARG_abs_a+1, 1
0x033A	0x211B      	CALL       _abs
0x033B	0x0870      	MOVF       R0, 0
0x033C	0x1683      	BSF        STATUS, 5
0x033D	0x1303      	BCF        STATUS, 6
0x033E	0x00ED      	MOVWF      _step_count
0x033F	0x0871      	MOVF       R0+1, 0
0x0340	0x00EE      	MOVWF      _step_count+1
;ACB_2.c,318 :: 		if (endx > startx) { // Right
0x0341	0x1283      	BCF        STATUS, 5
0x0342	0x1703      	BSF        STATUS, 6
0x0343	0x0829      	MOVF       FARG_Move_endx, 0
0x0344	0x0227      	SUBWF      FARG_Move_startx, 0
0x0345	0x1803      	BTFSC      STATUS, 0
0x0346	0x2B69      	GOTO       L_Move96
;ACB_2.c,319 :: 		k = step_count;
0x0347	0x1683      	BSF        STATUS, 5
0x0348	0x1303      	BCF        STATUS, 6
0x0349	0x086D      	MOVF       _step_count, 0
0x034A	0x1283      	BCF        STATUS, 5
0x034B	0x1703      	BSF        STATUS, 6
0x034C	0x0098      	MOVWF      _k
0x034D	0x1683      	BSF        STATUS, 5
0x034E	0x1303      	BCF        STATUS, 6
0x034F	0x086E      	MOVF       _step_count+1, 0
0x0350	0x1283      	BCF        STATUS, 5
0x0351	0x1703      	BSF        STATUS, 6
0x0352	0x0099      	MOVWF      _k+1
;ACB_2.c,320 :: 		while (k > 0) {
L_Move97:
0x0353	0x0819      	MOVF       _k+1, 0
0x0354	0x3C00      	SUBLW      0
0x0355	0x1D03      	BTFSS      STATUS, 2
0x0356	0x2B59      	GOTO       L__Move139
0x0357	0x0818      	MOVF       _k, 0
0x0358	0x3C00      	SUBLW      0
L__Move139:
0x0359	0x1803      	BTFSC      STATUS, 0
0x035A	0x2B68      	GOTO       L_Move98
;ACB_2.c,321 :: 		Move_X(1, Square_Size);
0x035B	0x3001      	MOVLW      1
0x035C	0x00AB      	MOVWF      FARG_Move_X_dir
0x035D	0x30FA      	MOVLW      250
0x035E	0x00AC      	MOVWF      FARG_Move_X_steps
0x035F	0x3000      	MOVLW      0
0x0360	0x00AD      	MOVWF      FARG_Move_X_steps+1
0x0361	0x2136      	CALL       _Move_X
;ACB_2.c,322 :: 		k--;
0x0362	0x3001      	MOVLW      1
0x0363	0x1703      	BSF        STATUS, 6
0x0364	0x0298      	SUBWF      _k, 1
0x0365	0x1C03      	BTFSS      STATUS, 0
0x0366	0x0399      	DECF       _k+1, 1
;ACB_2.c,323 :: 		}
0x0367	0x2B53      	GOTO       L_Move97
L_Move98:
;ACB_2.c,324 :: 		} else { // Left
0x0368	0x2B89      	GOTO       L_Move99
L_Move96:
;ACB_2.c,325 :: 		k = step_count;
0x0369	0x1683      	BSF        STATUS, 5
0x036A	0x1303      	BCF        STATUS, 6
0x036B	0x086D      	MOVF       _step_count, 0
0x036C	0x1283      	BCF        STATUS, 5
0x036D	0x1703      	BSF        STATUS, 6
0x036E	0x0098      	MOVWF      _k
0x036F	0x1683      	BSF        STATUS, 5
0x0370	0x1303      	BCF        STATUS, 6
0x0371	0x086E      	MOVF       _step_count+1, 0
0x0372	0x1283      	BCF        STATUS, 5
0x0373	0x1703      	BSF        STATUS, 6
0x0374	0x0099      	MOVWF      _k+1
;ACB_2.c,326 :: 		while (k > 0) {
L_Move100:
0x0375	0x0819      	MOVF       _k+1, 0
0x0376	0x3C00      	SUBLW      0
0x0377	0x1D03      	BTFSS      STATUS, 2
0x0378	0x2B7B      	GOTO       L__Move140
0x0379	0x0818      	MOVF       _k, 0
0x037A	0x3C00      	SUBLW      0
L__Move140:
0x037B	0x1803      	BTFSC      STATUS, 0
0x037C	0x2B89      	GOTO       L_Move101
;ACB_2.c,327 :: 		Move_X(0, Square_Size);
0x037D	0x01AB      	CLRF       FARG_Move_X_dir
0x037E	0x30FA      	MOVLW      250
0x037F	0x00AC      	MOVWF      FARG_Move_X_steps
0x0380	0x3000      	MOVLW      0
0x0381	0x00AD      	MOVWF      FARG_Move_X_steps+1
0x0382	0x2136      	CALL       _Move_X
;ACB_2.c,328 :: 		k--;
0x0383	0x3001      	MOVLW      1
0x0384	0x1703      	BSF        STATUS, 6
0x0385	0x0298      	SUBWF      _k, 1
0x0386	0x1C03      	BTFSS      STATUS, 0
0x0387	0x0399      	DECF       _k+1, 1
;ACB_2.c,329 :: 		}
0x0388	0x2B75      	GOTO       L_Move100
L_Move101:
;ACB_2.c,330 :: 		}
L_Move99:
;ACB_2.c,331 :: 		}
L_Move89:
;ACB_2.c,332 :: 		}
L_end_Move:
0x0389	0x0008      	RETURN
; end of _Move
_msDelay:
;ACB_2.c,168 :: 		void msDelay(unsigned int ms) {
;ACB_2.c,169 :: 		tick = 0;
0x038A	0x1283      	BCF        STATUS, 5
0x038B	0x1703      	BSF        STATUS, 6
0x038C	0x019E      	CLRF       _tick
0x038D	0x019F      	CLRF       _tick+1
;ACB_2.c,170 :: 		while (tick < ms)
L_msDelay25:
0x038E	0x0828      	MOVF       FARG_msDelay_ms+1, 0
0x038F	0x021F      	SUBWF      _tick+1, 0
0x0390	0x1D03      	BTFSS      STATUS, 2
0x0391	0x2B94      	GOTO       L__msDelay120
0x0392	0x0827      	MOVF       FARG_msDelay_ms, 0
0x0393	0x021E      	SUBWF      _tick, 0
L__msDelay120:
0x0394	0x1803      	BTFSC      STATUS, 0
0x0395	0x2B97      	GOTO       L_msDelay26
;ACB_2.c,171 :: 		;
0x0396	0x2B8E      	GOTO       L_msDelay25
L_msDelay26:
;ACB_2.c,172 :: 		}
L_end_msDelay:
0x0397	0x0008      	RETURN
; end of _msDelay
_Div_16x16_S:
;__Lib_Math.c,480 :: 		
;__Lib_Math.c,488 :: 		
0x0398	0x1283      	BCF        STATUS, 5
0x0399	0x1303      	BCF        STATUS, 6
0x039A	0x0874      	MOVF       R4, 0
0x039B	0x3A00      	XORLW      0
0x039C	0x1D03      	BTFSS      STATUS, 2
0x039D	0x2BA7      	GOTO       L_Div_16x16_S0
;__Lib_Math.c,489 :: 		
0x039E	0x0875      	MOVF       R5, 0
0x039F	0x3A00      	XORLW      0
0x03A0	0x1D03      	BTFSS      STATUS, 2
0x03A1	0x2BA7      	GOTO       L_Div_16x16_S1
;__Lib_Math.c,490 :: 		
0x03A2	0x30FF      	MOVLW      255
0x03A3	0x00F0      	MOVWF      R0
;__Lib_Math.c,491 :: 		
0x03A4	0x307F      	MOVLW      127
0x03A5	0x00F1      	MOVWF      R1
;__Lib_Math.c,492 :: 		
0x03A6	0x2C00      	GOTO       L_end_Div_16x16_S
;__Lib_Math.c,493 :: 		
L_Div_16x16_S1:
L_Div_16x16_S0:
;__Lib_Math.c,496 :: 		
0x03A7	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,497 :: 		
0x03A8	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,498 :: 		
0x03A9	0x01FD      	CLRF       R13
;__Lib_Math.c,499 :: 		
0x03AA	0x01F9      	CLRF       R9
;__Lib_Math.c,500 :: 		
0x03AB	0x01F8      	CLRF       R8
;__Lib_Math.c,501 :: 		
0x03AC	0x0871      	MOVF       R1, 0
;__Lib_Math.c,502 :: 		
0x03AD	0x0470      	IORWF      R0, 0
;__Lib_Math.c,503 :: 		
0x03AE	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,504 :: 		
0x03AF	0x3400      	RETLW      0
;__Lib_Math.c,506 :: 		
0x03B0	0x0871      	MOVF       R1, 0
;__Lib_Math.c,507 :: 		
0x03B1	0x0675      	XORWF      R5, 0
;__Lib_Math.c,508 :: 		
0x03B2	0x00FA      	MOVWF      R10
;__Lib_Math.c,509 :: 		
0x03B3	0x1BFA      	BTFSC      R10, 7
;__Lib_Math.c,510 :: 		
0x03B4	0x09FD      	COMF       R13, 1
;__Lib_Math.c,512 :: 		
0x03B5	0x01FB      	CLRF       R11
;__Lib_Math.c,514 :: 		
0x03B6	0x1FF5      	BTFSS      R5, 7
;__Lib_Math.c,515 :: 		
0x03B7	0x2BBD      	GOTO       $+6
;__Lib_Math.c,517 :: 		
0x03B8	0x09F4      	COMF       R4, 1
;__Lib_Math.c,518 :: 		
0x03B9	0x09F5      	COMF       R5, 1
;__Lib_Math.c,519 :: 		
0x03BA	0x0AF4      	INCF       R4, 1
;__Lib_Math.c,520 :: 		
0x03BB	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,521 :: 		
0x03BC	0x0AF5      	INCF       R5, 1
;__Lib_Math.c,523 :: 		
0x03BD	0x1FF1      	BTFSS      R1, 7
;__Lib_Math.c,524 :: 		
0x03BE	0x2BC4      	GOTO       $+6
;__Lib_Math.c,526 :: 		
0x03BF	0x09F0      	COMF       R0, 1
;__Lib_Math.c,527 :: 		
0x03C0	0x09F1      	COMF       R1, 1
;__Lib_Math.c,528 :: 		
0x03C1	0x0AF0      	INCF       R0, 1
;__Lib_Math.c,529 :: 		
0x03C2	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,530 :: 		
0x03C3	0x0AF1      	INCF       R1, 1
;__Lib_Math.c,532 :: 		
0x03C4	0x0871      	MOVF       R1, 0
;__Lib_Math.c,533 :: 		
0x03C5	0x0475      	IORWF      R5, 0
;__Lib_Math.c,534 :: 		
0x03C6	0x00FA      	MOVWF      R10
;__Lib_Math.c,535 :: 		
0x03C7	0x1BFA      	BTFSC      R10, 7
;__Lib_Math.c,536 :: 		
0x03C8	0x2BD9      	GOTO       $+17
;__Lib_Math.c,538 :: 		
0x03C9	0x20AC      	CALL       _Div_16x16_S_L
;__Lib_Math.c,540 :: 		
0x03CA	0x187B      	BTFSC      R11, 0
;__Lib_Math.c,541 :: 		
0x03CB	0x2BEC      	GOTO       $+33
;__Lib_Math.c,543 :: 		
0x03CC	0x1FFD      	BTFSS      R13, 7
;__Lib_Math.c,544 :: 		
0x03CD	0x3400      	RETLW      0
;__Lib_Math.c,546 :: 		
0x03CE	0x09F0      	COMF       R0, 1
;__Lib_Math.c,547 :: 		
0x03CF	0x09F1      	COMF       R1, 1
;__Lib_Math.c,548 :: 		
0x03D0	0x0AF0      	INCF       R0, 1
;__Lib_Math.c,549 :: 		
0x03D1	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,550 :: 		
0x03D2	0x0AF1      	INCF       R1, 1
;__Lib_Math.c,552 :: 		
0x03D3	0x09F8      	COMF       R8, 1
;__Lib_Math.c,553 :: 		
0x03D4	0x09F9      	COMF       R9, 1
;__Lib_Math.c,554 :: 		
0x03D5	0x0AF8      	INCF       R8, 1
;__Lib_Math.c,555 :: 		
0x03D6	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,556 :: 		
0x03D7	0x0AF9      	INCF       R9, 1
;__Lib_Math.c,558 :: 		
0x03D8	0x3400      	RETLW      0
;__Lib_Math.c,560 :: 		
0x03D9	0x1FF5      	BTFSS      R5, 7
;__Lib_Math.c,561 :: 		
0x03DA	0x2BE8      	GOTO       $+14
;__Lib_Math.c,562 :: 		
0x03DB	0x1BF1      	BTFSC      R1, 7
;__Lib_Math.c,563 :: 		
0x03DC	0x2BE4      	GOTO       $+8
;__Lib_Math.c,564 :: 		
0x03DD	0x0871      	MOVF       R1, 0
;__Lib_Math.c,565 :: 		
0x03DE	0x00F9      	MOVWF      R9
;__Lib_Math.c,566 :: 		
0x03DF	0x0870      	MOVF       R0, 0
;__Lib_Math.c,567 :: 		
0x03E0	0x00F8      	MOVWF      R8
;__Lib_Math.c,568 :: 		
0x03E1	0x01F1      	CLRF       R1
;__Lib_Math.c,569 :: 		
0x03E2	0x01F0      	CLRF       R0
;__Lib_Math.c,570 :: 		
0x03E3	0x2BCC      	GOTO       $-23
;__Lib_Math.c,571 :: 		
0x03E4	0x01F1      	CLRF       R1
;__Lib_Math.c,572 :: 		
0x03E5	0x01F0      	CLRF       R0
;__Lib_Math.c,573 :: 		
0x03E6	0x0AF0      	INCF       R0, 1
;__Lib_Math.c,574 :: 		
0x03E7	0x3400      	RETLW      0
;__Lib_Math.c,576 :: 		
0x03E8	0x09F1      	COMF       R1, 1
;__Lib_Math.c,577 :: 		
0x03E9	0x09F0      	COMF       R0, 1
;__Lib_Math.c,578 :: 		
0x03EA	0x0AFB      	INCF       R11, 1
;__Lib_Math.c,579 :: 		
0x03EB	0x2BC9      	GOTO       $-34
;__Lib_Math.c,581 :: 		
0x03EC	0x0AF8      	INCF       R8, 1
;__Lib_Math.c,582 :: 		
0x03ED	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,583 :: 		
0x03EE	0x0AF9      	INCF       R9, 1
;__Lib_Math.c,584 :: 		
0x03EF	0x0874      	MOVF       R4, 0
;__Lib_Math.c,585 :: 		
0x03F0	0x0278      	SUBWF      R8, 0
;__Lib_Math.c,586 :: 		
0x03F1	0x1D03      	BTFSS      STATUS, 2
;__Lib_Math.c,587 :: 		
0x03F2	0x2BCC      	GOTO       $-38
;__Lib_Math.c,588 :: 		
0x03F3	0x0875      	MOVF       R5, 0
;__Lib_Math.c,589 :: 		
0x03F4	0x0279      	SUBWF      R9, 0
;__Lib_Math.c,590 :: 		
0x03F5	0x1D03      	BTFSS      STATUS, 2
;__Lib_Math.c,591 :: 		
0x03F6	0x2BCC      	GOTO       $-42
;__Lib_Math.c,592 :: 		
0x03F7	0x01F9      	CLRF       R9
;__Lib_Math.c,593 :: 		
0x03F8	0x01F8      	CLRF       R8
;__Lib_Math.c,594 :: 		
0x03F9	0x0AF0      	INCF       R0, 1
;__Lib_Math.c,595 :: 		
0x03FA	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,596 :: 		
0x03FB	0x0AF1      	INCF       R1, 1
;__Lib_Math.c,597 :: 		
0x03FC	0x1FF1      	BTFSS      R1, 7
;__Lib_Math.c,598 :: 		
0x03FD	0x2BCC      	GOTO       $-49
;__Lib_Math.c,599 :: 		
0x03FE	0x0000      	NOP
;__Lib_Math.c,600 :: 		
0x03FF	0x34FF      	RETLW      255
;__Lib_Math.c,602 :: 		
L_end_Div_16x16_S:
0x0400	0x0008      	RETURN
; end of _Div_16x16_S
_Move_motors:
;ACB_2.c,334 :: 		void Move_motors() {
;ACB_2.c,335 :: 		if (Move_Type == 'x') {
0x0401	0x1283      	BCF        STATUS, 5
0x0402	0x1703      	BSF        STATUS, 6
0x0403	0x081D      	MOVF       _Move_Type, 0
0x0404	0x3A78      	XORLW      120
0x0405	0x1D03      	BTFSS      STATUS, 2
0x0406	0x2C90      	GOTO       L_Move_motors102
;ACB_2.c,337 :: 		Move('1', endy, endx, endy);
0x0407	0x3031      	MOVLW      49
0x0408	0x00A7      	MOVWF      FARG_Move_startx
0x0409	0x081C      	MOVF       _endy, 0
0x040A	0x00A8      	MOVWF      FARG_Move_starty
0x040B	0x1303      	BCF        STATUS, 6
0x040C	0x086F      	MOVF       _endx, 0
0x040D	0x1703      	BSF        STATUS, 6
0x040E	0x00A9      	MOVWF      FARG_Move_endx
0x040F	0x081C      	MOVF       _endy, 0
0x0410	0x00AA      	MOVWF      FARG_Move_endy
0x0411	0x2213      	CALL       _Move
;ACB_2.c,338 :: 		Move(endx, '1', endx, endy);
0x0412	0x1303      	BCF        STATUS, 6
0x0413	0x086F      	MOVF       _endx, 0
0x0414	0x1703      	BSF        STATUS, 6
0x0415	0x00A7      	MOVWF      FARG_Move_startx
0x0416	0x3031      	MOVLW      49
0x0417	0x00A8      	MOVWF      FARG_Move_starty
0x0418	0x1303      	BCF        STATUS, 6
0x0419	0x086F      	MOVF       _endx, 0
0x041A	0x1703      	BSF        STATUS, 6
0x041B	0x00A9      	MOVWF      FARG_Move_endx
0x041C	0x081C      	MOVF       _endy, 0
0x041D	0x00AA      	MOVWF      FARG_Move_endy
0x041E	0x2213      	CALL       _Move
;ACB_2.c,339 :: 		PORTE = PORTE | 0x04; // Magnet On
0x041F	0x1303      	BCF        STATUS, 6
0x0420	0x1509      	BSF        PORTE, 2
;ACB_2.c,340 :: 		msDelay(500);
0x0421	0x30F4      	MOVLW      244
0x0422	0x1703      	BSF        STATUS, 6
0x0423	0x00A7      	MOVWF      FARG_msDelay_ms
0x0424	0x3001      	MOVLW      1
0x0425	0x00A8      	MOVWF      FARG_msDelay_ms+1
0x0426	0x238A      	CALL       _msDelay
;ACB_2.c,341 :: 		Move_D(3, 128);              // Top right of square
0x0427	0x3003      	MOVLW      3
0x0428	0x00AB      	MOVWF      FARG_Move_D_dir
0x0429	0x3080      	MOVLW      128
0x042A	0x00AC      	MOVWF      FARG_Move_D_steps
0x042B	0x01AD      	CLRF       FARG_Move_D_steps+1
0x042C	0x20D8      	CALL       _Move_D
;ACB_2.c,342 :: 		Move(endx, endy, '8', endy); // Edge of box
0x042D	0x086F      	MOVF       _endx, 0
0x042E	0x1703      	BSF        STATUS, 6
0x042F	0x00A7      	MOVWF      FARG_Move_startx
0x0430	0x081C      	MOVF       _endy, 0
0x0431	0x00A8      	MOVWF      FARG_Move_starty
0x0432	0x3038      	MOVLW      56
0x0433	0x00A9      	MOVWF      FARG_Move_endx
0x0434	0x081C      	MOVF       _endy, 0
0x0435	0x00AA      	MOVWF      FARG_Move_endy
0x0436	0x2213      	CALL       _Move
;ACB_2.c,343 :: 		Move_X(1, home_X);           // Out of box
0x0437	0x3001      	MOVLW      1
0x0438	0x00AB      	MOVWF      FARG_Move_X_dir
0x0439	0x308C      	MOVLW      140
0x043A	0x00AC      	MOVWF      FARG_Move_X_steps
0x043B	0x3000      	MOVLW      0
0x043C	0x00AD      	MOVWF      FARG_Move_X_steps+1
0x043D	0x2136      	CALL       _Move_X
;ACB_2.c,344 :: 		PORTE = PORTE & 0xFB;        // Magnet Off
0x043E	0x30FB      	MOVLW      251
0x043F	0x0589      	ANDWF      PORTE, 1
;ACB_2.c,345 :: 		msDelay(500);
0x0440	0x30F4      	MOVLW      244
0x0441	0x1703      	BSF        STATUS, 6
0x0442	0x00A7      	MOVWF      FARG_msDelay_ms
0x0443	0x3001      	MOVLW      1
0x0444	0x00A8      	MOVWF      FARG_msDelay_ms+1
0x0445	0x238A      	CALL       _msDelay
;ACB_2.c,346 :: 		Move_Home(); // return home
0x0446	0x2198      	CALL       _Move_Home
;ACB_2.c,347 :: 		Move('1', starty, startx, starty);
0x0447	0x3031      	MOVLW      49
0x0448	0x1703      	BSF        STATUS, 6
0x0449	0x00A7      	MOVWF      FARG_Move_startx
0x044A	0x1303      	BCF        STATUS, 6
0x044B	0x086E      	MOVF       _starty, 0
0x044C	0x1703      	BSF        STATUS, 6
0x044D	0x00A8      	MOVWF      FARG_Move_starty
0x044E	0x1303      	BCF        STATUS, 6
0x044F	0x086D      	MOVF       _startx, 0
0x0450	0x1703      	BSF        STATUS, 6
0x0451	0x00A9      	MOVWF      FARG_Move_endx
0x0452	0x1303      	BCF        STATUS, 6
0x0453	0x086E      	MOVF       _starty, 0
0x0454	0x1703      	BSF        STATUS, 6
0x0455	0x00AA      	MOVWF      FARG_Move_endy
0x0456	0x2213      	CALL       _Move
;ACB_2.c,348 :: 		Move(startx, '1', startx, starty); // Go to pickup
0x0457	0x1303      	BCF        STATUS, 6
0x0458	0x086D      	MOVF       _startx, 0
0x0459	0x1703      	BSF        STATUS, 6
0x045A	0x00A7      	MOVWF      FARG_Move_startx
0x045B	0x3031      	MOVLW      49
0x045C	0x00A8      	MOVWF      FARG_Move_starty
0x045D	0x1303      	BCF        STATUS, 6
0x045E	0x086D      	MOVF       _startx, 0
0x045F	0x1703      	BSF        STATUS, 6
0x0460	0x00A9      	MOVWF      FARG_Move_endx
0x0461	0x1303      	BCF        STATUS, 6
0x0462	0x086E      	MOVF       _starty, 0
0x0463	0x1703      	BSF        STATUS, 6
0x0464	0x00AA      	MOVWF      FARG_Move_endy
0x0465	0x2213      	CALL       _Move
;ACB_2.c,350 :: 		PORTE = PORTE | 0x04; // Magnet On
0x0466	0x1303      	BCF        STATUS, 6
0x0467	0x1509      	BSF        PORTE, 2
;ACB_2.c,351 :: 		msDelay(500);
0x0468	0x30F4      	MOVLW      244
0x0469	0x1703      	BSF        STATUS, 6
0x046A	0x00A7      	MOVWF      FARG_msDelay_ms
0x046B	0x3001      	MOVLW      1
0x046C	0x00A8      	MOVWF      FARG_msDelay_ms+1
0x046D	0x238A      	CALL       _msDelay
;ACB_2.c,352 :: 		Move_D(3, 128); // Top right of square
0x046E	0x3003      	MOVLW      3
0x046F	0x00AB      	MOVWF      FARG_Move_D_dir
0x0470	0x3080      	MOVLW      128
0x0471	0x00AC      	MOVWF      FARG_Move_D_steps
0x0472	0x01AD      	CLRF       FARG_Move_D_steps+1
0x0473	0x20D8      	CALL       _Move_D
;ACB_2.c,353 :: 		Move(startx, starty, endx, endy);
0x0474	0x086D      	MOVF       _startx, 0
0x0475	0x1703      	BSF        STATUS, 6
0x0476	0x00A7      	MOVWF      FARG_Move_startx
0x0477	0x1303      	BCF        STATUS, 6
0x0478	0x086E      	MOVF       _starty, 0
0x0479	0x1703      	BSF        STATUS, 6
0x047A	0x00A8      	MOVWF      FARG_Move_starty
0x047B	0x1303      	BCF        STATUS, 6
0x047C	0x086F      	MOVF       _endx, 0
0x047D	0x1703      	BSF        STATUS, 6
0x047E	0x00A9      	MOVWF      FARG_Move_endx
0x047F	0x081C      	MOVF       _endy, 0
0x0480	0x00AA      	MOVWF      FARG_Move_endy
0x0481	0x2213      	CALL       _Move
;ACB_2.c,354 :: 		Move_D(0, 128);       // bottom left of square
0x0482	0x01AB      	CLRF       FARG_Move_D_dir
0x0483	0x3080      	MOVLW      128
0x0484	0x00AC      	MOVWF      FARG_Move_D_steps
0x0485	0x01AD      	CLRF       FARG_Move_D_steps+1
0x0486	0x20D8      	CALL       _Move_D
;ACB_2.c,355 :: 		PORTE = PORTE & 0xFB; // Magnet Off
0x0487	0x30FB      	MOVLW      251
0x0488	0x0589      	ANDWF      PORTE, 1
;ACB_2.c,356 :: 		msDelay(500);
0x0489	0x30F4      	MOVLW      244
0x048A	0x1703      	BSF        STATUS, 6
0x048B	0x00A7      	MOVWF      FARG_msDelay_ms
0x048C	0x3001      	MOVLW      1
0x048D	0x00A8      	MOVWF      FARG_msDelay_ms+1
0x048E	0x238A      	CALL       _msDelay
;ACB_2.c,358 :: 		} else if (myRxBuffer[3] = 't') {
0x048F	0x2CEF      	GOTO       L_Move_motors103
L_Move_motors102:
0x0490	0x3074      	MOVLW      116
0x0491	0x1303      	BCF        STATUS, 6
0x0492	0x00A5      	MOVWF      _myRxBuffer+3
;ACB_2.c,360 :: 		startx = myRxBuffer[1];
0x0493	0x0823      	MOVF       _myRxBuffer+1, 0
0x0494	0x00ED      	MOVWF      _startx
;ACB_2.c,361 :: 		starty = myRxBuffer[2];
0x0495	0x0824      	MOVF       _myRxBuffer+2, 0
0x0496	0x00EE      	MOVWF      _starty
;ACB_2.c,362 :: 		endx = myRxBuffer[4];
0x0497	0x0826      	MOVF       _myRxBuffer+4, 0
0x0498	0x00EF      	MOVWF      _endx
;ACB_2.c,363 :: 		endy = myRxbuffer[5];
0x0499	0x0827      	MOVF       _myRxBuffer+5, 0
0x049A	0x1703      	BSF        STATUS, 6
0x049B	0x009C      	MOVWF      _endy
;ACB_2.c,364 :: 		Move('1', starty, startx, starty);
0x049C	0x3031      	MOVLW      49
0x049D	0x00A7      	MOVWF      FARG_Move_startx
0x049E	0x1303      	BCF        STATUS, 6
0x049F	0x0824      	MOVF       _myRxBuffer+2, 0
0x04A0	0x1703      	BSF        STATUS, 6
0x04A1	0x00A8      	MOVWF      FARG_Move_starty
0x04A2	0x1303      	BCF        STATUS, 6
0x04A3	0x0823      	MOVF       _myRxBuffer+1, 0
0x04A4	0x1703      	BSF        STATUS, 6
0x04A5	0x00A9      	MOVWF      FARG_Move_endx
0x04A6	0x1303      	BCF        STATUS, 6
0x04A7	0x0824      	MOVF       _myRxBuffer+2, 0
0x04A8	0x1703      	BSF        STATUS, 6
0x04A9	0x00AA      	MOVWF      FARG_Move_endy
0x04AA	0x2213      	CALL       _Move
;ACB_2.c,365 :: 		Move(startx, '1', startx, starty);
0x04AB	0x1303      	BCF        STATUS, 6
0x04AC	0x086D      	MOVF       _startx, 0
0x04AD	0x1703      	BSF        STATUS, 6
0x04AE	0x00A7      	MOVWF      FARG_Move_startx
0x04AF	0x3031      	MOVLW      49
0x04B0	0x00A8      	MOVWF      FARG_Move_starty
0x04B1	0x1303      	BCF        STATUS, 6
0x04B2	0x086D      	MOVF       _startx, 0
0x04B3	0x1703      	BSF        STATUS, 6
0x04B4	0x00A9      	MOVWF      FARG_Move_endx
0x04B5	0x1303      	BCF        STATUS, 6
0x04B6	0x086E      	MOVF       _starty, 0
0x04B7	0x1703      	BSF        STATUS, 6
0x04B8	0x00AA      	MOVWF      FARG_Move_endy
0x04B9	0x2213      	CALL       _Move
;ACB_2.c,366 :: 		msDelay(500);
0x04BA	0x30F4      	MOVLW      244
0x04BB	0x00A7      	MOVWF      FARG_msDelay_ms
0x04BC	0x3001      	MOVLW      1
0x04BD	0x00A8      	MOVWF      FARG_msDelay_ms+1
0x04BE	0x238A      	CALL       _msDelay
;ACB_2.c,367 :: 		PORTE = PORTE | 0x04; // Magnet On
0x04BF	0x1303      	BCF        STATUS, 6
0x04C0	0x1509      	BSF        PORTE, 2
;ACB_2.c,368 :: 		Move_D(3, 128);       // Top right of square
0x04C1	0x3003      	MOVLW      3
0x04C2	0x1703      	BSF        STATUS, 6
0x04C3	0x00AB      	MOVWF      FARG_Move_D_dir
0x04C4	0x3080      	MOVLW      128
0x04C5	0x00AC      	MOVWF      FARG_Move_D_steps
0x04C6	0x01AD      	CLRF       FARG_Move_D_steps+1
0x04C7	0x20D8      	CALL       _Move_D
;ACB_2.c,369 :: 		msDelay(500);
0x04C8	0x30F4      	MOVLW      244
0x04C9	0x1703      	BSF        STATUS, 6
0x04CA	0x00A7      	MOVWF      FARG_msDelay_ms
0x04CB	0x3001      	MOVLW      1
0x04CC	0x00A8      	MOVWF      FARG_msDelay_ms+1
0x04CD	0x238A      	CALL       _msDelay
;ACB_2.c,370 :: 		Move(startx, starty, endx, endy);
0x04CE	0x1303      	BCF        STATUS, 6
0x04CF	0x086D      	MOVF       _startx, 0
0x04D0	0x1703      	BSF        STATUS, 6
0x04D1	0x00A7      	MOVWF      FARG_Move_startx
0x04D2	0x1303      	BCF        STATUS, 6
0x04D3	0x086E      	MOVF       _starty, 0
0x04D4	0x1703      	BSF        STATUS, 6
0x04D5	0x00A8      	MOVWF      FARG_Move_starty
0x04D6	0x1303      	BCF        STATUS, 6
0x04D7	0x086F      	MOVF       _endx, 0
0x04D8	0x1703      	BSF        STATUS, 6
0x04D9	0x00A9      	MOVWF      FARG_Move_endx
0x04DA	0x081C      	MOVF       _endy, 0
0x04DB	0x00AA      	MOVWF      FARG_Move_endy
0x04DC	0x2213      	CALL       _Move
;ACB_2.c,371 :: 		msDelay(500);
0x04DD	0x30F4      	MOVLW      244
0x04DE	0x00A7      	MOVWF      FARG_msDelay_ms
0x04DF	0x3001      	MOVLW      1
0x04E0	0x00A8      	MOVWF      FARG_msDelay_ms+1
0x04E1	0x238A      	CALL       _msDelay
;ACB_2.c,372 :: 		Move_D(0, 128);       // bottom left of square
0x04E2	0x01AB      	CLRF       FARG_Move_D_dir
0x04E3	0x3080      	MOVLW      128
0x04E4	0x00AC      	MOVWF      FARG_Move_D_steps
0x04E5	0x01AD      	CLRF       FARG_Move_D_steps+1
0x04E6	0x20D8      	CALL       _Move_D
;ACB_2.c,373 :: 		PORTE = PORTE & 0xFB; // Magnet Off
0x04E7	0x30FB      	MOVLW      251
0x04E8	0x0589      	ANDWF      PORTE, 1
;ACB_2.c,374 :: 		msDelay(500);
0x04E9	0x30F4      	MOVLW      244
0x04EA	0x1703      	BSF        STATUS, 6
0x04EB	0x00A7      	MOVWF      FARG_msDelay_ms
0x04EC	0x3001      	MOVLW      1
0x04ED	0x00A8      	MOVWF      FARG_msDelay_ms+1
0x04EE	0x238A      	CALL       _msDelay
;ACB_2.c,375 :: 		}
L_Move_motors103:
;ACB_2.c,377 :: 		Move_Home();
0x04EF	0x2198      	CALL       _Move_Home
;ACB_2.c,378 :: 		}
L_end_Move_motors:
0x04F0	0x0008      	RETURN
; end of _Move_motors
_read_level:
;ACB_2.c,392 :: 		unsigned char read_level(){
;ACB_2.c,394 :: 		do{
L_read_level107:
;ACB_2.c,395 :: 		Lcd_Cmd(_LCD_CLEAR);
0x04F1	0x3001      	MOVLW      1
0x04F2	0x1283      	BCF        STATUS, 5
0x04F3	0x1703      	BSF        STATUS, 6
0x04F4	0x00B0      	MOVWF      FARG_Lcd_Cmd_out_char
0x04F5	0x2060      	CALL       _Lcd_Cmd
;ACB_2.c,396 :: 		lvl = ATD_read();
0x04F6	0x220A      	CALL       _ATD_read
0x04F7	0x0870      	MOVF       R0, 0
0x04F8	0x1703      	BSF        STATUS, 6
0x04F9	0x00A6      	MOVWF      read_level_lvl_L0
;ACB_2.c,397 :: 		lvl = (lvl*4)/255;
0x04FA	0x0870      	MOVF       R0, 0
0x04FB	0x00F2      	MOVWF      R2
0x04FC	0x01F3      	CLRF       R2+1
0x04FD	0x0DF2      	RLF        R2, 1
0x04FE	0x0DF3      	RLF        R2+1, 1
0x04FF	0x1072      	BCF        R2, 0
0x0500	0x0DF2      	RLF        R2, 1
0x0501	0x0DF3      	RLF        R2+1, 1
0x0502	0x1072      	BCF        R2, 0
0x0503	0x0872      	MOVF       R2, 0
0x0504	0x00F0      	MOVWF      R0
0x0505	0x0873      	MOVF       R2+1, 0
0x0506	0x00F1      	MOVWF      R0+1
0x0507	0x30FF      	MOVLW      255
0x0508	0x00F4      	MOVWF      R4
0x0509	0x01F5      	CLRF       R4+1
0x050A	0x2398      	CALL       _Div_16x16_S
0x050B	0x0870      	MOVF       R0, 0
0x050C	0x1703      	BSF        STATUS, 6
0x050D	0x00A6      	MOVWF      read_level_lvl_L0
;ACB_2.c,398 :: 		LCD_Out(1,1, "Level: ");
0x050E	0x3001      	MOVLW      1
0x050F	0x00A7      	MOVWF      FARG_Lcd_Out_row
0x0510	0x3001      	MOVLW      1
0x0511	0x00A8      	MOVWF      FARG_Lcd_Out_column
0x0512	0x3033      	MOVLW      ?lstr11_ACB_2
0x0513	0x00A9      	MOVWF      FARG_Lcd_Out_text
0x0514	0x21C9      	CALL       _Lcd_Out
;ACB_2.c,399 :: 		txtlvl[0] = lvl+'1';
0x0515	0x3031      	MOVLW      49
0x0516	0x0726      	ADDWF      read_level_lvl_L0, 0
0x0517	0x1303      	BCF        STATUS, 6
0x0518	0x00B1      	MOVWF      _txtlvl
;ACB_2.c,400 :: 		LCD_Out(1,8,txtlvl);
0x0519	0x3001      	MOVLW      1
0x051A	0x1703      	BSF        STATUS, 6
0x051B	0x00A7      	MOVWF      FARG_Lcd_Out_row
0x051C	0x3008      	MOVLW      8
0x051D	0x00A8      	MOVWF      FARG_Lcd_Out_column
0x051E	0x3031      	MOVLW      _txtlvl
0x051F	0x00A9      	MOVWF      FARG_Lcd_Out_text
0x0520	0x21C9      	CALL       _Lcd_Out
;ACB_2.c,401 :: 		Lcd_Out(2, 1, "Confrim?");
0x0521	0x3002      	MOVLW      2
0x0522	0x00A7      	MOVWF      FARG_Lcd_Out_row
0x0523	0x3001      	MOVLW      1
0x0524	0x00A8      	MOVWF      FARG_Lcd_Out_column
0x0525	0x303B      	MOVLW      ?lstr12_ACB_2
0x0526	0x00A9      	MOVWF      FARG_Lcd_Out_text
0x0527	0x21C9      	CALL       _Lcd_Out
;ACB_2.c,402 :: 		msDelay(150);
0x0528	0x3096      	MOVLW      150
0x0529	0x00A7      	MOVWF      FARG_msDelay_ms
0x052A	0x01A8      	CLRF       FARG_msDelay_ms+1
0x052B	0x238A      	CALL       _msDelay
;ACB_2.c,404 :: 		} while (!(PORTD & 0x01));
0x052C	0x1303      	BCF        STATUS, 6
0x052D	0x1C08      	BTFSS      PORTD, 0
0x052E	0x2CF1      	GOTO       L_read_level107
;ACB_2.c,405 :: 		return lvl;
0x052F	0x1703      	BSF        STATUS, 6
0x0530	0x0826      	MOVF       read_level_lvl_L0, 0
0x0531	0x00F0      	MOVWF      R0
;ACB_2.c,406 :: 		}
L_end_read_level:
0x0532	0x0008      	RETURN
; end of _read_level
_USART_Tx:
;ACB_2.c,264 :: 		void USART_Tx(char trans) {
;ACB_2.c,265 :: 		while (!(TXSTA & 0x02));
L_USART_Tx63:
0x0533	0x1683      	BSF        STATUS, 5
0x0534	0x1303      	BCF        STATUS, 6
0x0535	0x1898      	BTFSC      TXSTA, 1
0x0536	0x2D38      	GOTO       L_USART_Tx64
0x0537	0x2D33      	GOTO       L_USART_Tx63
L_USART_Tx64:
;ACB_2.c,266 :: 		TXREG = trans;
0x0538	0x1283      	BCF        STATUS, 5
0x0539	0x1703      	BSF        STATUS, 6
0x053A	0x0826      	MOVF       FARG_USART_Tx_trans, 0
0x053B	0x1303      	BCF        STATUS, 6
0x053C	0x0099      	MOVWF      TXREG
;ACB_2.c,267 :: 		}
L_end_USART_Tx:
0x053D	0x0008      	RETURN
; end of _USART_Tx
_Lcd_Init:
;__Lib_Lcd.c,84 :: 		
;__Lib_Lcd.c,86 :: 		
0x053E	0x1683      	BSF        STATUS, 5
0x053F	0x1303      	BCF        STATUS, 6
0x0540	0x1287      	BCF        LCD_EN_Direction, BitPos(LCD_EN_Direction+0)
;__Lib_Lcd.c,87 :: 		
0x0541	0x1207      	BCF        LCD_RS_Direction, BitPos(LCD_RS_Direction+0)
;__Lib_Lcd.c,88 :: 		
0x0542	0x1105      	BCF        LCD_D4_Direction, BitPos(LCD_D4_Direction+0)
;__Lib_Lcd.c,89 :: 		
0x0543	0x1086      	BCF        LCD_D5_Direction, BitPos(LCD_D5_Direction+0)
;__Lib_Lcd.c,90 :: 		
0x0544	0x1106      	BCF        LCD_D6_Direction, BitPos(LCD_D6_Direction+0)
;__Lib_Lcd.c,91 :: 		
0x0545	0x1186      	BCF        LCD_D7_Direction, BitPos(LCD_D7_Direction+0)
;__Lib_Lcd.c,93 :: 		
0x0546	0x1283      	BCF        STATUS, 5
0x0547	0x1287      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,94 :: 		
0x0548	0x1207      	BCF        LCD_RS, BitPos(LCD_RS+0)
;__Lib_Lcd.c,95 :: 		
0x0549	0x1186      	BCF        LCD_D7, BitPos(LCD_D7+0)
;__Lib_Lcd.c,96 :: 		
0x054A	0x1106      	BCF        LCD_D6, BitPos(LCD_D6+0)
;__Lib_Lcd.c,97 :: 		
0x054B	0x1086      	BCF        LCD_D5, BitPos(LCD_D5+0)
;__Lib_Lcd.c,98 :: 		
0x054C	0x1105      	BCF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,100 :: 		
0x054D	0x2049      	CALL       _Delay_5500us
;__Lib_Lcd.c,101 :: 		
0x054E	0x2049      	CALL       _Delay_5500us
;__Lib_Lcd.c,102 :: 		
0x054F	0x2049      	CALL       _Delay_5500us
;__Lib_Lcd.c,105 :: 		
0x0550	0x1486      	BSF        LCD_D5, BitPos(LCD_D5+0)
;__Lib_Lcd.c,106 :: 		
0x0551	0x1505      	BSF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,107 :: 		
0x0552	0x1687      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,108 :: 		
0x0553	0x203F      	CALL       _Delay_1us
;__Lib_Lcd.c,109 :: 		
0x0554	0x1287      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,110 :: 		
0x0555	0x2049      	CALL       _Delay_5500us
;__Lib_Lcd.c,112 :: 		
0x0556	0x1687      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,113 :: 		
0x0557	0x203F      	CALL       _Delay_1us
;__Lib_Lcd.c,114 :: 		
0x0558	0x1287      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,115 :: 		
0x0559	0x2049      	CALL       _Delay_5500us
;__Lib_Lcd.c,117 :: 		
0x055A	0x1687      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,118 :: 		
0x055B	0x203F      	CALL       _Delay_1us
;__Lib_Lcd.c,119 :: 		
0x055C	0x1287      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,120 :: 		
0x055D	0x2049      	CALL       _Delay_5500us
;__Lib_Lcd.c,123 :: 		
0x055E	0x1105      	BCF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,124 :: 		
0x055F	0x1687      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,125 :: 		
0x0560	0x203F      	CALL       _Delay_1us
;__Lib_Lcd.c,126 :: 		
0x0561	0x1287      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,127 :: 		
0x0562	0x2049      	CALL       _Delay_5500us
;__Lib_Lcd.c,130 :: 		
0x0563	0x1687      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,131 :: 		
0x0564	0x203F      	CALL       _Delay_1us
;__Lib_Lcd.c,132 :: 		
0x0565	0x1287      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,134 :: 		
0x0566	0x1086      	BCF        LCD_D5, BitPos(LCD_D5+0)
;__Lib_Lcd.c,135 :: 		
0x0567	0x1586      	BSF        LCD_D7, BitPos(LCD_D7+0)
;__Lib_Lcd.c,136 :: 		
0x0568	0x1687      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,137 :: 		
0x0569	0x203F      	CALL       _Delay_1us
;__Lib_Lcd.c,138 :: 		
0x056A	0x1287      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,139 :: 		
0x056B	0x2049      	CALL       _Delay_5500us
;__Lib_Lcd.c,142 :: 		
0x056C	0x1186      	BCF        LCD_D7, BitPos(LCD_D7+0)
;__Lib_Lcd.c,143 :: 		
0x056D	0x1505      	BSF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,144 :: 		
0x056E	0x1687      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,145 :: 		
0x056F	0x203F      	CALL       _Delay_1us
;__Lib_Lcd.c,146 :: 		
0x0570	0x1287      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,148 :: 		
0x0571	0x1105      	BCF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,149 :: 		
0x0572	0x1687      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,150 :: 		
0x0573	0x203F      	CALL       _Delay_1us
;__Lib_Lcd.c,151 :: 		
0x0574	0x1287      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,152 :: 		
0x0575	0x2049      	CALL       _Delay_5500us
;__Lib_Lcd.c,155 :: 		
0x0576	0x1687      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,156 :: 		
0x0577	0x203F      	CALL       _Delay_1us
;__Lib_Lcd.c,157 :: 		
0x0578	0x1287      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,159 :: 		
0x0579	0x1505      	BSF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,160 :: 		
0x057A	0x1687      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,161 :: 		
0x057B	0x203F      	CALL       _Delay_1us
;__Lib_Lcd.c,162 :: 		
0x057C	0x1287      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,163 :: 		
0x057D	0x2049      	CALL       _Delay_5500us
;__Lib_Lcd.c,166 :: 		
0x057E	0x1105      	BCF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,167 :: 		
0x057F	0x1687      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,168 :: 		
0x0580	0x203F      	CALL       _Delay_1us
;__Lib_Lcd.c,169 :: 		
0x0581	0x1287      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,171 :: 		
0x0582	0x1586      	BSF        LCD_D7, BitPos(LCD_D7+0)
;__Lib_Lcd.c,172 :: 		
0x0583	0x1506      	BSF        LCD_D6, BitPos(LCD_D6+0)
;__Lib_Lcd.c,173 :: 		
0x0584	0x1486      	BSF        LCD_D5, BitPos(LCD_D5+0)
;__Lib_Lcd.c,174 :: 		
0x0585	0x1505      	BSF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,175 :: 		
0x0586	0x1687      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,176 :: 		
0x0587	0x203F      	CALL       _Delay_1us
;__Lib_Lcd.c,177 :: 		
0x0588	0x1287      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,179 :: 		
0x0589	0x2049      	CALL       _Delay_5500us
;__Lib_Lcd.c,181 :: 		
0x058A	0x1703      	BSF        STATUS, 6
0x058B	0x1420      	BSF        __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
;__Lib_Lcd.c,182 :: 		
L_end_Lcd_Init:
0x058C	0x0008      	RETURN
; end of _Lcd_Init
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x058D	0x2191      	CALL       _____DoICP
0x058E	0x118A      	BCF        PCLATH, 3
0x058F	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x0590	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x0591	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x0592	0x0A9A      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x0593	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x0594	0x0A9B      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x0595	0x03F0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x0596	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x0597	0x2D8D      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x0598	0x0008      	RETURN
; end of ___CC2DW
_USART_Init:
;ACB_2.c,257 :: 		void USART_Init() {
;ACB_2.c,258 :: 		SPBRG = 12;   // 9600 Baud Rate
0x0599	0x300C      	MOVLW      12
0x059A	0x1683      	BSF        STATUS, 5
0x059B	0x1303      	BCF        STATUS, 6
0x059C	0x0099      	MOVWF      SPBRG
;ACB_2.c,259 :: 		TXSTA = 0x20; // 8-bit, Tx enable, Async, Low speed
0x059D	0x3020      	MOVLW      32
0x059E	0x0098      	MOVWF      TXSTA
;ACB_2.c,260 :: 		RCSTA = 0x90; // SP Enbale, 8-bit, cont. Rx
0x059F	0x3090      	MOVLW      144
0x05A0	0x1283      	BCF        STATUS, 5
0x05A1	0x0098      	MOVWF      RCSTA
;ACB_2.c,261 :: 		TRISC = 0x80;
0x05A2	0x3080      	MOVLW      128
0x05A3	0x1683      	BSF        STATUS, 5
0x05A4	0x0087      	MOVWF      TRISC
;ACB_2.c,262 :: 		PIE1 = PIE1 | 0x20; // RCIE
0x05A5	0x168C      	BSF        PIE1, 5
;ACB_2.c,263 :: 		}
L_end_USART_Init:
0x05A6	0x0008      	RETURN
; end of _USART_Init
_main:
0x05A7	0x2752      	CALL       1874
;ACB_2.c,69 :: 		void main() {
;ACB_2.c,70 :: 		ADCON0 = 0x41;// ATD ON, Don't GO, Channel 0, Fosc/16
0x05A8	0x3041      	MOVLW      65
0x05A9	0x1283      	BCF        STATUS, 5
0x05AA	0x1303      	BCF        STATUS, 6
0x05AB	0x009F      	MOVWF      ADCON0
;ACB_2.c,71 :: 		ADCON1 = 0x4E;// A0  Analog, 500 KHz, left justified
0x05AC	0x304E      	MOVLW      78
0x05AD	0x1683      	BSF        STATUS, 5
0x05AE	0x009F      	MOVWF      ADCON1
;ACB_2.c,72 :: 		TRISA = 0x01;  // RA2 = D1 (LCD), RA0 = Analog input (Potentiometer)
0x05AF	0x3001      	MOVLW      1
0x05B0	0x0085      	MOVWF      TRISA
;ACB_2.c,73 :: 		TRISB = 0x30;  // RB1-RB3 = D2-D4, RB4 = Switch_X, RB5 = Switch_Y, RB6 and RB7
0x05B1	0x3030      	MOVLW      48
0x05B2	0x0086      	MOVWF      TRISB
;ACB_2.c,75 :: 		TRISC = 0x80;  // RC0 = Step_X, RC1 = Dir_X, RC2 = Step_Y, RC3 = Dir_Y, RC4 =
0x05B3	0x3080      	MOVLW      128
0x05B4	0x0087      	MOVWF      TRISC
;ACB_2.c,77 :: 		TRISD = 0x01; // RD0 = Push button
0x05B5	0x3001      	MOVLW      1
0x05B6	0x0088      	MOVWF      TRISD
;ACB_2.c,78 :: 		TRISE = 0x00; // RE0 = EN_X, RE1 = EN_Y (active low), RE2 = Magnet
0x05B7	0x0189      	CLRF       TRISE
;ACB_2.c,80 :: 		PORTC = 0x00;
0x05B8	0x1283      	BCF        STATUS, 5
0x05B9	0x0187      	CLRF       PORTC
;ACB_2.c,81 :: 		PORTE = 0x03;  // Motors OFF
0x05BA	0x3003      	MOVLW      3
0x05BB	0x0089      	MOVWF      PORTE
;ACB_2.c,82 :: 		INTCON = 0xE8; // GIE, RBIE, PEIE, and TMR0IE
0x05BC	0x30E8      	MOVLW      232
0x05BD	0x008B      	MOVWF      INTCON
;ACB_2.c,83 :: 		OPTION_REG = 0x87;
0x05BE	0x3087      	MOVLW      135
0x05BF	0x1683      	BSF        STATUS, 5
0x05C0	0x0081      	MOVWF      OPTION_REG
;ACB_2.c,84 :: 		TMR0 = 248;
0x05C1	0x30F8      	MOVLW      248
0x05C2	0x1283      	BCF        STATUS, 5
0x05C3	0x0081      	MOVWF      TMR0
;ACB_2.c,87 :: 		Lcd_Init();
0x05C4	0x253E      	CALL       _Lcd_Init
;ACB_2.c,88 :: 		USART_Init();
0x05C5	0x2599      	CALL       _USART_Init
;ACB_2.c,89 :: 		Lcd_Cmd(_LCD_CLEAR);      // Clear display
0x05C6	0x3001      	MOVLW      1
0x05C7	0x1283      	BCF        STATUS, 5
0x05C8	0x1703      	BSF        STATUS, 6
0x05C9	0x00B0      	MOVWF      FARG_Lcd_Cmd_out_char
0x05CA	0x2060      	CALL       _Lcd_Cmd
;ACB_2.c,90 :: 		Lcd_Cmd(_LCD_CURSOR_OFF); // Cursor off
0x05CB	0x300C      	MOVLW      12
0x05CC	0x1703      	BSF        STATUS, 6
0x05CD	0x00B0      	MOVWF      FARG_Lcd_Cmd_out_char
0x05CE	0x2060      	CALL       _Lcd_Cmd
;ACB_2.c,91 :: 		Move_Home();
0x05CF	0x2198      	CALL       _Move_Home
;ACB_2.c,92 :: 		Rx_count = 0;
0x05D0	0x01EC      	CLRF       _Rx_count
;ACB_2.c,93 :: 		while (1) {
L_main8:
;ACB_2.c,94 :: 		Lcd_Cmd(_LCD_CLEAR);
0x05D1	0x3001      	MOVLW      1
0x05D2	0x1703      	BSF        STATUS, 6
0x05D3	0x00B0      	MOVWF      FARG_Lcd_Cmd_out_char
0x05D4	0x2060      	CALL       _Lcd_Cmd
;ACB_2.c,95 :: 		Lcd_Out(1, 1, "Welcome to ACBS");
0x05D5	0x3001      	MOVLW      1
0x05D6	0x1703      	BSF        STATUS, 6
0x05D7	0x00A7      	MOVWF      FARG_Lcd_Out_row
0x05D8	0x3001      	MOVLW      1
0x05D9	0x00A8      	MOVWF      FARG_Lcd_Out_column
0x05DA	0x30CF      	MOVLW      ?lstr1_ACB_2
0x05DB	0x00A9      	MOVWF      FARG_Lcd_Out_text
0x05DC	0x21C9      	CALL       _Lcd_Out
;ACB_2.c,96 :: 		Lcd_Out(2, 1, "Start?");
0x05DD	0x3002      	MOVLW      2
0x05DE	0x00A7      	MOVWF      FARG_Lcd_Out_row
0x05DF	0x3001      	MOVLW      1
0x05E0	0x00A8      	MOVWF      FARG_Lcd_Out_column
0x05E1	0x30C8      	MOVLW      ?lstr2_ACB_2
0x05E2	0x00A9      	MOVWF      FARG_Lcd_Out_text
0x05E3	0x21C9      	CALL       _Lcd_Out
;ACB_2.c,98 :: 		while (!(PORTD & 0x01));
L_main10:
0x05E4	0x1303      	BCF        STATUS, 6
0x05E5	0x1808      	BTFSC      PORTD, 0
0x05E6	0x2DE8      	GOTO       L_main11
0x05E7	0x2DE4      	GOTO       L_main10
L_main11:
;ACB_2.c,99 :: 		USART_Tx('S');
0x05E8	0x3053      	MOVLW      83
0x05E9	0x1703      	BSF        STATUS, 6
0x05EA	0x00A6      	MOVWF      FARG_USART_Tx_trans
0x05EB	0x2533      	CALL       _USART_Tx
;ACB_2.c,101 :: 		msDelay(200);
0x05EC	0x30C8      	MOVLW      200
0x05ED	0x1703      	BSF        STATUS, 6
0x05EE	0x00A7      	MOVWF      FARG_msDelay_ms
0x05EF	0x01A8      	CLRF       FARG_msDelay_ms+1
0x05F0	0x238A      	CALL       _msDelay
;ACB_2.c,102 :: 		level = read_level();
0x05F1	0x24F1      	CALL       _read_level
0x05F2	0x0870      	MOVF       R0, 0
0x05F3	0x00A2      	MOVWF      _level
;ACB_2.c,103 :: 		USART_TX(level+'0');
0x05F4	0x3030      	MOVLW      48
0x05F5	0x0770      	ADDWF      R0, 0
0x05F6	0x00A6      	MOVWF      FARG_USART_Tx_trans
0x05F7	0x2533      	CALL       _USART_Tx
;ACB_2.c,105 :: 		Lcd_Cmd(_LCD_CLEAR);
0x05F8	0x3001      	MOVLW      1
0x05F9	0x1703      	BSF        STATUS, 6
0x05FA	0x00B0      	MOVWF      FARG_Lcd_Cmd_out_char
0x05FB	0x2060      	CALL       _Lcd_Cmd
;ACB_2.c,106 :: 		Lcd_Out(1, 1, "Game On");
0x05FC	0x3001      	MOVLW      1
0x05FD	0x1703      	BSF        STATUS, 6
0x05FE	0x00A7      	MOVWF      FARG_Lcd_Out_row
0x05FF	0x3001      	MOVLW      1
0x0600	0x00A8      	MOVWF      FARG_Lcd_Out_column
0x0601	0x3010      	MOVLW      ?lstr3_ACB_2
0x0602	0x00A9      	MOVWF      FARG_Lcd_Out_text
0x0603	0x21C9      	CALL       _Lcd_Out
;ACB_2.c,107 :: 		game = 1;
0x0604	0x3001      	MOVLW      1
0x0605	0x00A3      	MOVWF      _game
;ACB_2.c,110 :: 		do { // Game is on
L_main12:
;ACB_2.c,111 :: 		Lcd_Cmd(_LCD_CLEAR);
0x0606	0x3001      	MOVLW      1
0x0607	0x00B0      	MOVWF      FARG_Lcd_Cmd_out_char
0x0608	0x2060      	CALL       _Lcd_Cmd
;ACB_2.c,112 :: 		Lcd_Out(1, 1, "Enter Move...");
0x0609	0x3001      	MOVLW      1
0x060A	0x1703      	BSF        STATUS, 6
0x060B	0x00A7      	MOVWF      FARG_Lcd_Out_row
0x060C	0x3001      	MOVLW      1
0x060D	0x00A8      	MOVWF      FARG_Lcd_Out_column
0x060E	0x30DF      	MOVLW      ?lstr4_ACB_2
0x060F	0x00A9      	MOVWF      FARG_Lcd_Out_text
0x0610	0x21C9      	CALL       _Lcd_Out
;ACB_2.c,113 :: 		Rx_Count = 0;
0x0611	0x1303      	BCF        STATUS, 6
0x0612	0x01EC      	CLRF       _Rx_count
;ACB_2.c,114 :: 		while (Rx_count != 6);           // Wait for recieval of the Move
L_main15:
0x0613	0x086C      	MOVF       _Rx_count, 0
0x0614	0x3A06      	XORLW      6
0x0615	0x1903      	BTFSC      STATUS, 2
0x0616	0x2E18      	GOTO       L_main16
0x0617	0x2E13      	GOTO       L_main15
L_main16:
;ACB_2.c,115 :: 		Rx_count = 0; // Reset rx counter
0x0618	0x01EC      	CLRF       _Rx_count
;ACB_2.c,116 :: 		Move_Valid = myRXBuffer[0];
0x0619	0x0822      	MOVF       _myRxBuffer, 0
0x061A	0x1703      	BSF        STATUS, 6
0x061B	0x00A1      	MOVWF      _Move_Valid
;ACB_2.c,117 :: 		startx = myRxBuffer[1];
0x061C	0x1303      	BCF        STATUS, 6
0x061D	0x0823      	MOVF       _myRxBuffer+1, 0
0x061E	0x00ED      	MOVWF      _startx
;ACB_2.c,118 :: 		starty = myRxBuffer[2];
0x061F	0x0824      	MOVF       _myRxBuffer+2, 0
0x0620	0x00EE      	MOVWF      _starty
;ACB_2.c,119 :: 		Move_Type = myRxBuffer[3];
0x0621	0x0825      	MOVF       _myRxBuffer+3, 0
0x0622	0x1703      	BSF        STATUS, 6
0x0623	0x009D      	MOVWF      _Move_Type
;ACB_2.c,120 :: 		endx = myRxBuffer[4];
0x0624	0x1303      	BCF        STATUS, 6
0x0625	0x0826      	MOVF       _myRxBuffer+4, 0
0x0626	0x00EF      	MOVWF      _endx
;ACB_2.c,121 :: 		endy = myRxbuffer[5];
0x0627	0x0827      	MOVF       _myRxBuffer+5, 0
0x0628	0x1703      	BSF        STATUS, 6
0x0629	0x009C      	MOVWF      _endy
;ACB_2.c,123 :: 		if (Move_Valid == 'L') { // Move is legal
0x062A	0x1303      	BCF        STATUS, 6
0x062B	0x0822      	MOVF       _myRxBuffer, 0
0x062C	0x3A4C      	XORLW      76
0x062D	0x1D03      	BTFSS      STATUS, 2
0x062E	0x2E41      	GOTO       L_main17
;ACB_2.c,124 :: 		Lcd_Cmd(_LCD_CLEAR);
0x062F	0x3001      	MOVLW      1
0x0630	0x1703      	BSF        STATUS, 6
0x0631	0x00B0      	MOVWF      FARG_Lcd_Cmd_out_char
0x0632	0x2060      	CALL       _Lcd_Cmd
;ACB_2.c,125 :: 		Lcd_Out(1, 1, "Player Moving...");
0x0633	0x3001      	MOVLW      1
0x0634	0x1703      	BSF        STATUS, 6
0x0635	0x00A7      	MOVWF      FARG_Lcd_Out_row
0x0636	0x3001      	MOVLW      1
0x0637	0x00A8      	MOVWF      FARG_Lcd_Out_column
0x0638	0x305B      	MOVLW      ?lstr5_ACB_2
0x0639	0x00A9      	MOVWF      FARG_Lcd_Out_text
0x063A	0x21C9      	CALL       _Lcd_Out
;ACB_2.c,126 :: 		Move_motors();
0x063B	0x2401      	CALL       _Move_motors
;ACB_2.c,127 :: 		USART_Tx('D');
0x063C	0x3044      	MOVLW      68
0x063D	0x1703      	BSF        STATUS, 6
0x063E	0x00A6      	MOVWF      FARG_USART_Tx_trans
0x063F	0x2533      	CALL       _USART_Tx
;ACB_2.c,128 :: 		}
0x0640	0x2E5A      	GOTO       L_main18
L_main17:
;ACB_2.c,130 :: 		else if (Move_Valid == 'M') {
0x0641	0x1703      	BSF        STATUS, 6
0x0642	0x0821      	MOVF       _Move_Valid, 0
0x0643	0x3A4D      	XORLW      77
0x0644	0x1D03      	BTFSS      STATUS, 2
0x0645	0x2E5A      	GOTO       L_main19
;ACB_2.c,132 :: 		Lcd_Cmd(_LCD_CLEAR);
0x0646	0x3001      	MOVLW      1
0x0647	0x00B0      	MOVWF      FARG_Lcd_Cmd_out_char
0x0648	0x2060      	CALL       _Lcd_Cmd
;ACB_2.c,133 :: 		Lcd_Out(1, 1, "Game ended");
0x0649	0x3001      	MOVLW      1
0x064A	0x1703      	BSF        STATUS, 6
0x064B	0x00A7      	MOVWF      FARG_Lcd_Out_row
0x064C	0x3001      	MOVLW      1
0x064D	0x00A8      	MOVWF      FARG_Lcd_Out_column
0x064E	0x3050      	MOVLW      ?lstr6_ACB_2
0x064F	0x00A9      	MOVWF      FARG_Lcd_Out_text
0x0650	0x21C9      	CALL       _Lcd_Out
;ACB_2.c,134 :: 		Lcd_Out(2, 1, "Player wins");
0x0651	0x3002      	MOVLW      2
0x0652	0x00A7      	MOVWF      FARG_Lcd_Out_row
0x0653	0x3001      	MOVLW      1
0x0654	0x00A8      	MOVWF      FARG_Lcd_Out_column
0x0655	0x3044      	MOVLW      ?lstr7_ACB_2
0x0656	0x00A9      	MOVWF      FARG_Lcd_Out_text
0x0657	0x21C9      	CALL       _Lcd_Out
;ACB_2.c,135 :: 		game = 0;
0x0658	0x01A3      	CLRF       _game
;ACB_2.c,136 :: 		break;
0x0659	0x2EA7      	GOTO       L_main13
;ACB_2.c,137 :: 		}
L_main19:
L_main18:
;ACB_2.c,138 :: 		Rx_Count = 0;
0x065A	0x1303      	BCF        STATUS, 6
0x065B	0x01EC      	CLRF       _Rx_count
;ACB_2.c,139 :: 		while (Rx_count != 6);           // Wait to recieve engine move
L_main20:
0x065C	0x086C      	MOVF       _Rx_count, 0
0x065D	0x3A06      	XORLW      6
0x065E	0x1903      	BTFSC      STATUS, 2
0x065F	0x2E61      	GOTO       L_main21
0x0660	0x2E5C      	GOTO       L_main20
L_main21:
;ACB_2.c,140 :: 		Rx_count = 0; // reset counter
0x0661	0x01EC      	CLRF       _Rx_count
;ACB_2.c,141 :: 		Move_Valid = myRXBuffer[0];
0x0662	0x0822      	MOVF       _myRxBuffer, 0
0x0663	0x1703      	BSF        STATUS, 6
0x0664	0x00A1      	MOVWF      _Move_Valid
;ACB_2.c,142 :: 		startx = myRxBuffer[1];
0x0665	0x1303      	BCF        STATUS, 6
0x0666	0x0823      	MOVF       _myRxBuffer+1, 0
0x0667	0x00ED      	MOVWF      _startx
;ACB_2.c,143 :: 		starty = myRxBuffer[2];
0x0668	0x0824      	MOVF       _myRxBuffer+2, 0
0x0669	0x00EE      	MOVWF      _starty
;ACB_2.c,144 :: 		Move_Type = myRxBuffer[3];
0x066A	0x0825      	MOVF       _myRxBuffer+3, 0
0x066B	0x1703      	BSF        STATUS, 6
0x066C	0x009D      	MOVWF      _Move_Type
;ACB_2.c,145 :: 		endx = myRxBuffer[4];
0x066D	0x1303      	BCF        STATUS, 6
0x066E	0x0826      	MOVF       _myRxBuffer+4, 0
0x066F	0x00EF      	MOVWF      _endx
;ACB_2.c,146 :: 		endy = myRxbuffer[5];
0x0670	0x0827      	MOVF       _myRxBuffer+5, 0
0x0671	0x1703      	BSF        STATUS, 6
0x0672	0x009C      	MOVWF      _endy
;ACB_2.c,148 :: 		if (Move_Valid == 'E'){
0x0673	0x1303      	BCF        STATUS, 6
0x0674	0x0822      	MOVF       _myRxBuffer, 0
0x0675	0x3A45      	XORLW      69
0x0676	0x1D03      	BTFSS      STATUS, 2
0x0677	0x2E8A      	GOTO       L_main22
;ACB_2.c,149 :: 		Lcd_Cmd(_LCD_CLEAR);
0x0678	0x3001      	MOVLW      1
0x0679	0x1703      	BSF        STATUS, 6
0x067A	0x00B0      	MOVWF      FARG_Lcd_Cmd_out_char
0x067B	0x2060      	CALL       _Lcd_Cmd
;ACB_2.c,150 :: 		Lcd_Out(1, 1, "Engine Moving...");
0x067C	0x3001      	MOVLW      1
0x067D	0x1703      	BSF        STATUS, 6
0x067E	0x00A7      	MOVWF      FARG_Lcd_Out_row
0x067F	0x3001      	MOVLW      1
0x0680	0x00A8      	MOVWF      FARG_Lcd_Out_column
0x0681	0x30A0      	MOVLW      ?lstr8_ACB_2
0x0682	0x00A9      	MOVWF      FARG_Lcd_Out_text
0x0683	0x21C9      	CALL       _Lcd_Out
;ACB_2.c,151 :: 		Move_motors();
0x0684	0x2401      	CALL       _Move_motors
;ACB_2.c,152 :: 		USART_Tx('D');
0x0685	0x3044      	MOVLW      68
0x0686	0x1703      	BSF        STATUS, 6
0x0687	0x00A6      	MOVWF      FARG_USART_Tx_trans
0x0688	0x2533      	CALL       _USART_Tx
;ACB_2.c,153 :: 		}
0x0689	0x2EA3      	GOTO       L_main23
L_main22:
;ACB_2.c,155 :: 		else if (Move_Valid == 'M') {
0x068A	0x1703      	BSF        STATUS, 6
0x068B	0x0821      	MOVF       _Move_Valid, 0
0x068C	0x3A4D      	XORLW      77
0x068D	0x1D03      	BTFSS      STATUS, 2
0x068E	0x2EA3      	GOTO       L_main24
;ACB_2.c,157 :: 		Lcd_Cmd(_LCD_CLEAR);
0x068F	0x3001      	MOVLW      1
0x0690	0x00B0      	MOVWF      FARG_Lcd_Cmd_out_char
0x0691	0x2060      	CALL       _Lcd_Cmd
;ACB_2.c,158 :: 		Lcd_Out(1, 1, "Game ended");
0x0692	0x3001      	MOVLW      1
0x0693	0x1703      	BSF        STATUS, 6
0x0694	0x00A7      	MOVWF      FARG_Lcd_Out_row
0x0695	0x3001      	MOVLW      1
0x0696	0x00A8      	MOVWF      FARG_Lcd_Out_column
0x0697	0x30BD      	MOVLW      ?lstr9_ACB_2
0x0698	0x00A9      	MOVWF      FARG_Lcd_Out_text
0x0699	0x21C9      	CALL       _Lcd_Out
;ACB_2.c,159 :: 		Lcd_Out(2, 1, "Engine wins");
0x069A	0x3002      	MOVLW      2
0x069B	0x00A7      	MOVWF      FARG_Lcd_Out_row
0x069C	0x3001      	MOVLW      1
0x069D	0x00A8      	MOVWF      FARG_Lcd_Out_column
0x069E	0x30B1      	MOVLW      ?lstr10_ACB_2
0x069F	0x00A9      	MOVWF      FARG_Lcd_Out_text
0x06A0	0x21C9      	CALL       _Lcd_Out
;ACB_2.c,160 :: 		game = 0;
0x06A1	0x01A3      	CLRF       _game
;ACB_2.c,161 :: 		break;
0x06A2	0x2EA7      	GOTO       L_main13
;ACB_2.c,162 :: 		}
L_main24:
L_main23:
0x06A3	0x1703      	BSF        STATUS, 6
;ACB_2.c,163 :: 		} while (game);
0x06A4	0x0823      	MOVF       _game, 0
0x06A5	0x1D03      	BTFSS      STATUS, 2
0x06A6	0x2E06      	GOTO       L_main12
L_main13:
;ACB_2.c,164 :: 		msDelay(60000); // Wait one minute
0x06A7	0x3060      	MOVLW      96
0x06A8	0x00A7      	MOVWF      FARG_msDelay_ms
0x06A9	0x30EA      	MOVLW      234
0x06AA	0x00A8      	MOVWF      FARG_msDelay_ms+1
0x06AB	0x238A      	CALL       _msDelay
;ACB_2.c,165 :: 		}
0x06AC	0x2DD1      	GOTO       L_main8
;ACB_2.c,166 :: 		}
L_end_main:
0x06AD	0x2EAD      	GOTO       $+0
; end of _main
0x0752	0x3022      	MOVLW      34
0x0753	0x0084      	MOVWF      FSR
0x0754	0x304A      	MOVLW      74
0x0755	0x1283      	BCF        STATUS, 5
0x0756	0x1303      	BCF        STATUS, 6
0x0757	0x00F0      	MOVWF      R0
0x0758	0x30B3      	MOVLW      179
0x0759	0x1703      	BSF        STATUS, 6
0x075A	0x009A      	MOVWF      ___DoICPAddr
0x075B	0x3006      	MOVLW      6
0x075C	0x009B      	MOVWF      283
0x075D	0x258D      	CALL       1421
0x075E	0x30A0      	MOVLW      160
0x075F	0x0084      	MOVWF      FSR
0x0760	0x303F      	MOVLW      63
0x0761	0x1283      	BCF        STATUS, 5
0x0762	0x00F0      	MOVWF      R0
0x0763	0x30FD      	MOVLW      253
0x0764	0x1703      	BSF        STATUS, 6
0x0765	0x009A      	MOVWF      ___DoICPAddr
0x0766	0x3006      	MOVLW      6
0x0767	0x009B      	MOVWF      283
0x0768	0x258D      	CALL       1421
0x0769	0x306C      	MOVLW      108
0x076A	0x0084      	MOVWF      FSR
0x076B	0x3001      	MOVLW      1
0x076C	0x1283      	BCF        STATUS, 5
0x076D	0x00F0      	MOVWF      R0
0x076E	0x3003      	MOVLW      3
0x076F	0x1703      	BSF        STATUS, 6
0x0770	0x009A      	MOVWF      ___DoICPAddr
0x0771	0x3000      	MOVLW      0
0x0772	0x009B      	MOVWF      283
0x0773	0x258D      	CALL       1421
0x0774	0x30DF      	MOVLW      223
0x0775	0x0084      	MOVWF      FSR
0x0776	0x300E      	MOVLW      14
0x0777	0x1283      	BCF        STATUS, 5
0x0778	0x00F0      	MOVWF      R0
0x0779	0x303C      	MOVLW      60
0x077A	0x1703      	BSF        STATUS, 6
0x077B	0x009A      	MOVWF      ___DoICPAddr
0x077C	0x3007      	MOVLW      7
0x077D	0x009B      	MOVWF      283
0x077E	0x258D      	CALL       1421
0x077F	0x3010      	MOVLW      272
0x0780	0x1783      	BSF        STATUS, 7
0x0781	0x0084      	MOVWF      FSR
0x0782	0x3008      	MOVLW      8
0x0783	0x1283      	BCF        STATUS, 5
0x0784	0x00F0      	MOVWF      R0
0x0785	0x304A      	MOVLW      74
0x0786	0x1703      	BSF        STATUS, 6
0x0787	0x009A      	MOVWF      ___DoICPAddr
0x0788	0x3007      	MOVLW      7
0x0789	0x009B      	MOVWF      283
0x078A	0x258D      	CALL       1421
0x078B	0x1383      	BCF        STATUS, 7
0x078C	0x0008      	RETURN
;ACB_2.c,0 :: ?ICS_Rx_count
0x0003	0x3400 ;?ICS_Rx_count+0
; end of ?ICS_Rx_count
;ACB_2.c,0 :: ?ICS_myRxBuffer
0x06B3	0x3420 ;?ICS_myRxBuffer+0
0x06B4	0x3420 ;?ICS_myRxBuffer+1
0x06B5	0x3420 ;?ICS_myRxBuffer+2
0x06B6	0x3420 ;?ICS_myRxBuffer+3
0x06B7	0x3420 ;?ICS_myRxBuffer+4
0x06B8	0x3420 ;?ICS_myRxBuffer+5
0x06B9	0x3420 ;?ICS_myRxBuffer+6
0x06BA	0x3420 ;?ICS_myRxBuffer+7
0x06BB	0x3420 ;?ICS_myRxBuffer+8
0x06BC	0x3420 ;?ICS_myRxBuffer+9
0x06BD	0x3420 ;?ICS_myRxBuffer+10
0x06BE	0x3420 ;?ICS_myRxBuffer+11
0x06BF	0x3420 ;?ICS_myRxBuffer+12
0x06C0	0x3420 ;?ICS_myRxBuffer+13
0x06C1	0x3400 ;?ICS_myRxBuffer+14
; end of ?ICS_myRxBuffer
;ACB_2.c,0 :: ?ICS_txtlvl
0x06C2	0x3420 ;?ICS_txtlvl+0
0x06C3	0x3400 ;?ICS_txtlvl+1
; end of ?ICS_txtlvl
;ACB_2.c,0 :: ?ICS?lstr11_ACB_2
0x06C4	0x344C ;?ICS?lstr11_ACB_2+0
0x06C5	0x3465 ;?ICS?lstr11_ACB_2+1
0x06C6	0x3476 ;?ICS?lstr11_ACB_2+2
0x06C7	0x3465 ;?ICS?lstr11_ACB_2+3
0x06C8	0x346C ;?ICS?lstr11_ACB_2+4
0x06C9	0x343A ;?ICS?lstr11_ACB_2+5
0x06CA	0x3420 ;?ICS?lstr11_ACB_2+6
0x06CB	0x3400 ;?ICS?lstr11_ACB_2+7
; end of ?ICS?lstr11_ACB_2
;ACB_2.c,0 :: ?ICS?lstr12_ACB_2
0x06CC	0x3443 ;?ICS?lstr12_ACB_2+0
0x06CD	0x346F ;?ICS?lstr12_ACB_2+1
0x06CE	0x346E ;?ICS?lstr12_ACB_2+2
0x06CF	0x3466 ;?ICS?lstr12_ACB_2+3
0x06D0	0x3472 ;?ICS?lstr12_ACB_2+4
0x06D1	0x3469 ;?ICS?lstr12_ACB_2+5
0x06D2	0x346D ;?ICS?lstr12_ACB_2+6
0x06D3	0x343F ;?ICS?lstr12_ACB_2+7
0x06D4	0x3400 ;?ICS?lstr12_ACB_2+8
; end of ?ICS?lstr12_ACB_2
;ACB_2.c,0 :: ?ICS?lstr7_ACB_2
0x06D5	0x3450 ;?ICS?lstr7_ACB_2+0
0x06D6	0x346C ;?ICS?lstr7_ACB_2+1
0x06D7	0x3461 ;?ICS?lstr7_ACB_2+2
0x06D8	0x3479 ;?ICS?lstr7_ACB_2+3
0x06D9	0x3465 ;?ICS?lstr7_ACB_2+4
0x06DA	0x3472 ;?ICS?lstr7_ACB_2+5
0x06DB	0x3420 ;?ICS?lstr7_ACB_2+6
0x06DC	0x3477 ;?ICS?lstr7_ACB_2+7
0x06DD	0x3469 ;?ICS?lstr7_ACB_2+8
0x06DE	0x346E ;?ICS?lstr7_ACB_2+9
0x06DF	0x3473 ;?ICS?lstr7_ACB_2+10
0x06E0	0x3400 ;?ICS?lstr7_ACB_2+11
; end of ?ICS?lstr7_ACB_2
;ACB_2.c,0 :: ?ICS?lstr6_ACB_2
0x06E1	0x3447 ;?ICS?lstr6_ACB_2+0
0x06E2	0x3461 ;?ICS?lstr6_ACB_2+1
0x06E3	0x346D ;?ICS?lstr6_ACB_2+2
0x06E4	0x3465 ;?ICS?lstr6_ACB_2+3
0x06E5	0x3420 ;?ICS?lstr6_ACB_2+4
0x06E6	0x3465 ;?ICS?lstr6_ACB_2+5
0x06E7	0x346E ;?ICS?lstr6_ACB_2+6
0x06E8	0x3464 ;?ICS?lstr6_ACB_2+7
0x06E9	0x3465 ;?ICS?lstr6_ACB_2+8
0x06EA	0x3464 ;?ICS?lstr6_ACB_2+9
0x06EB	0x3400 ;?ICS?lstr6_ACB_2+10
; end of ?ICS?lstr6_ACB_2
;ACB_2.c,0 :: ?ICS?lstr5_ACB_2
0x06EC	0x3450 ;?ICS?lstr5_ACB_2+0
0x06ED	0x346C ;?ICS?lstr5_ACB_2+1
0x06EE	0x3461 ;?ICS?lstr5_ACB_2+2
0x06EF	0x3479 ;?ICS?lstr5_ACB_2+3
0x06F0	0x3465 ;?ICS?lstr5_ACB_2+4
0x06F1	0x3472 ;?ICS?lstr5_ACB_2+5
0x06F2	0x3420 ;?ICS?lstr5_ACB_2+6
0x06F3	0x344D ;?ICS?lstr5_ACB_2+7
0x06F4	0x346F ;?ICS?lstr5_ACB_2+8
0x06F5	0x3476 ;?ICS?lstr5_ACB_2+9
0x06F6	0x3469 ;?ICS?lstr5_ACB_2+10
0x06F7	0x346E ;?ICS?lstr5_ACB_2+11
0x06F8	0x3467 ;?ICS?lstr5_ACB_2+12
0x06F9	0x342E ;?ICS?lstr5_ACB_2+13
0x06FA	0x342E ;?ICS?lstr5_ACB_2+14
0x06FB	0x342E ;?ICS?lstr5_ACB_2+15
0x06FC	0x3400 ;?ICS?lstr5_ACB_2+16
; end of ?ICS?lstr5_ACB_2
;ACB_2.c,0 :: ?ICS?lstr8_ACB_2
0x06FD	0x3445 ;?ICS?lstr8_ACB_2+0
0x06FE	0x346E ;?ICS?lstr8_ACB_2+1
0x06FF	0x3467 ;?ICS?lstr8_ACB_2+2
0x0700	0x3469 ;?ICS?lstr8_ACB_2+3
0x0701	0x346E ;?ICS?lstr8_ACB_2+4
0x0702	0x3465 ;?ICS?lstr8_ACB_2+5
0x0703	0x3420 ;?ICS?lstr8_ACB_2+6
0x0704	0x344D ;?ICS?lstr8_ACB_2+7
0x0705	0x346F ;?ICS?lstr8_ACB_2+8
0x0706	0x3476 ;?ICS?lstr8_ACB_2+9
0x0707	0x3469 ;?ICS?lstr8_ACB_2+10
0x0708	0x346E ;?ICS?lstr8_ACB_2+11
0x0709	0x3467 ;?ICS?lstr8_ACB_2+12
0x070A	0x342E ;?ICS?lstr8_ACB_2+13
0x070B	0x342E ;?ICS?lstr8_ACB_2+14
0x070C	0x342E ;?ICS?lstr8_ACB_2+15
0x070D	0x3400 ;?ICS?lstr8_ACB_2+16
; end of ?ICS?lstr8_ACB_2
;ACB_2.c,0 :: ?ICS?lstr10_ACB_2
0x070E	0x3445 ;?ICS?lstr10_ACB_2+0
0x070F	0x346E ;?ICS?lstr10_ACB_2+1
0x0710	0x3467 ;?ICS?lstr10_ACB_2+2
0x0711	0x3469 ;?ICS?lstr10_ACB_2+3
0x0712	0x346E ;?ICS?lstr10_ACB_2+4
0x0713	0x3465 ;?ICS?lstr10_ACB_2+5
0x0714	0x3420 ;?ICS?lstr10_ACB_2+6
0x0715	0x3477 ;?ICS?lstr10_ACB_2+7
0x0716	0x3469 ;?ICS?lstr10_ACB_2+8
0x0717	0x346E ;?ICS?lstr10_ACB_2+9
0x0718	0x3473 ;?ICS?lstr10_ACB_2+10
0x0719	0x3400 ;?ICS?lstr10_ACB_2+11
; end of ?ICS?lstr10_ACB_2
;ACB_2.c,0 :: ?ICS?lstr9_ACB_2
0x071A	0x3447 ;?ICS?lstr9_ACB_2+0
0x071B	0x3461 ;?ICS?lstr9_ACB_2+1
0x071C	0x346D ;?ICS?lstr9_ACB_2+2
0x071D	0x3465 ;?ICS?lstr9_ACB_2+3
0x071E	0x3420 ;?ICS?lstr9_ACB_2+4
0x071F	0x3465 ;?ICS?lstr9_ACB_2+5
0x0720	0x346E ;?ICS?lstr9_ACB_2+6
0x0721	0x3464 ;?ICS?lstr9_ACB_2+7
0x0722	0x3465 ;?ICS?lstr9_ACB_2+8
0x0723	0x3464 ;?ICS?lstr9_ACB_2+9
0x0724	0x3400 ;?ICS?lstr9_ACB_2+10
; end of ?ICS?lstr9_ACB_2
;ACB_2.c,0 :: ?ICS?lstr2_ACB_2
0x0725	0x3453 ;?ICS?lstr2_ACB_2+0
0x0726	0x3474 ;?ICS?lstr2_ACB_2+1
0x0727	0x3461 ;?ICS?lstr2_ACB_2+2
0x0728	0x3472 ;?ICS?lstr2_ACB_2+3
0x0729	0x3474 ;?ICS?lstr2_ACB_2+4
0x072A	0x343F ;?ICS?lstr2_ACB_2+5
0x072B	0x3400 ;?ICS?lstr2_ACB_2+6
; end of ?ICS?lstr2_ACB_2
;ACB_2.c,0 :: ?ICS?lstr1_ACB_2
0x072C	0x3457 ;?ICS?lstr1_ACB_2+0
0x072D	0x3465 ;?ICS?lstr1_ACB_2+1
0x072E	0x346C ;?ICS?lstr1_ACB_2+2
0x072F	0x3463 ;?ICS?lstr1_ACB_2+3
0x0730	0x346F ;?ICS?lstr1_ACB_2+4
0x0731	0x346D ;?ICS?lstr1_ACB_2+5
0x0732	0x3465 ;?ICS?lstr1_ACB_2+6
0x0733	0x3420 ;?ICS?lstr1_ACB_2+7
0x0734	0x3474 ;?ICS?lstr1_ACB_2+8
0x0735	0x346F ;?ICS?lstr1_ACB_2+9
0x0736	0x3420 ;?ICS?lstr1_ACB_2+10
0x0737	0x3441 ;?ICS?lstr1_ACB_2+11
0x0738	0x3443 ;?ICS?lstr1_ACB_2+12
0x0739	0x3442 ;?ICS?lstr1_ACB_2+13
0x073A	0x3453 ;?ICS?lstr1_ACB_2+14
0x073B	0x3400 ;?ICS?lstr1_ACB_2+15
; end of ?ICS?lstr1_ACB_2
;ACB_2.c,0 :: ?ICS?lstr4_ACB_2
0x073C	0x3445 ;?ICS?lstr4_ACB_2+0
0x073D	0x346E ;?ICS?lstr4_ACB_2+1
0x073E	0x3474 ;?ICS?lstr4_ACB_2+2
0x073F	0x3465 ;?ICS?lstr4_ACB_2+3
0x0740	0x3472 ;?ICS?lstr4_ACB_2+4
0x0741	0x3420 ;?ICS?lstr4_ACB_2+5
0x0742	0x344D ;?ICS?lstr4_ACB_2+6
0x0743	0x346F ;?ICS?lstr4_ACB_2+7
0x0744	0x3476 ;?ICS?lstr4_ACB_2+8
0x0745	0x3465 ;?ICS?lstr4_ACB_2+9
0x0746	0x342E ;?ICS?lstr4_ACB_2+10
0x0747	0x342E ;?ICS?lstr4_ACB_2+11
0x0748	0x342E ;?ICS?lstr4_ACB_2+12
0x0749	0x3400 ;?ICS?lstr4_ACB_2+13
; end of ?ICS?lstr4_ACB_2
;ACB_2.c,0 :: ?ICS?lstr3_ACB_2
0x074A	0x3447 ;?ICS?lstr3_ACB_2+0
0x074B	0x3461 ;?ICS?lstr3_ACB_2+1
0x074C	0x346D ;?ICS?lstr3_ACB_2+2
0x074D	0x3465 ;?ICS?lstr3_ACB_2+3
0x074E	0x3420 ;?ICS?lstr3_ACB_2+4
0x074F	0x344F ;?ICS?lstr3_ACB_2+5
0x0750	0x346E ;?ICS?lstr3_ACB_2+6
0x0751	0x3400 ;?ICS?lstr3_ACB_2+7
; end of ?ICS?lstr3_ACB_2
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [59]    _interrupt
0x003F       [3]    _Delay_1us
0x0042       [7]    _Delay_50us
0x0049      [13]    _Delay_5500us
0x0056      [10]    _MotorDelay
0x0060      [76]    _Lcd_Cmd
0x00AC      [44]    _Div_16x16_S_L
0x00D8      [67]    _Move_D
0x011B      [27]    _abs
0x0136      [41]    _Move_X
0x015F      [41]    _Move_Y
0x0188       [9]    _Lcd_Chr_CP
0x0191       [7]    _____DoICP
0x0198      [49]    _Move_Home
0x01C9      [65]    _Lcd_Out
0x020A       [9]    _ATD_read
0x0213     [375]    _Move
0x038A      [14]    _msDelay
0x0398     [105]    _Div_16x16_S
0x0401     [240]    _Move_motors
0x04F1      [66]    _read_level
0x0533      [11]    _USART_Tx
0x053E      [79]    _Lcd_Init
0x058D      [12]    ___CC2DW
0x0599      [14]    _USART_Init
0x05A7     [262]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0001       [1]    TMR0
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0005       [0]    LCD_D4
0x0005       [0]    RA2_bit
0x0006       [0]    RB2_bit
0x0006       [0]    RB1_bit
0x0006       [0]    RB3_bit
0x0006       [1]    PORTB
0x0006       [0]    LCD_D6
0x0006       [0]    LCD_D7
0x0006       [0]    LCD_D5
0x0007       [0]    RC4_bit
0x0007       [0]    RC5_bit
0x0007       [0]    LCD_RS
0x0007       [0]    LCD_EN
0x0007       [1]    PORTC
0x0008       [1]    PORTD
0x0009       [1]    PORTE
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PIR1
0x0018       [1]    RCSTA
0x0019       [1]    TXREG
0x001A       [1]    RCREG
0x001E       [1]    ADRESH
0x001F       [1]    ADCON0
0x0022      [15]    _myRxBuffer
0x0031       [2]    _txtlvl
0x0033       [8]    ?lstr11_ACB_2
0x003B       [9]    ?lstr12_ACB_2
0x0044      [12]    ?lstr7_ACB_2
0x0050      [11]    ?lstr6_ACB_2
0x005B      [17]    ?lstr5_ACB_2
0x006C       [1]    _Rx_count
0x006D       [1]    _startx
0x006E       [1]    _starty
0x006F       [1]    _endx
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0085       [0]    LCD_D4_Direction
0x0085       [1]    TRISA
0x0085       [0]    TRISA2_bit
0x0086       [0]    TRISB1_bit
0x0086       [0]    TRISB2_bit
0x0086       [0]    LCD_D5_Direction
0x0086       [0]    LCD_D6_Direction
0x0086       [0]    LCD_D7_Direction
0x0086       [1]    TRISB
0x0086       [0]    TRISB3_bit
0x0087       [0]    LCD_RS_Direction
0x0087       [0]    LCD_EN_Direction
0x0087       [1]    TRISC
0x0087       [0]    TRISC5_bit
0x0087       [0]    TRISC4_bit
0x0088       [1]    TRISD
0x0089       [1]    TRISE
0x008C       [1]    PIE1
0x0098       [1]    TXSTA
0x0099       [1]    SPBRG
0x009F       [1]    ADCON1
0x00A0      [17]    ?lstr8_ACB_2
0x00B1      [12]    ?lstr10_ACB_2
0x00BD      [11]    ?lstr9_ACB_2
0x00C8       [7]    ?lstr2_ACB_2
0x00CF      [16]    ?lstr1_ACB_2
0x00DF      [14]    ?lstr4_ACB_2
0x00ED       [2]    _step_count
0x00EF       [1]    _a
0x0110       [8]    ?lstr3_ACB_2
0x0118       [2]    _k
0x011A       [2]    ___DoICPAddr
0x011C       [1]    _endy
0x011D       [1]    _Move_Type
0x011E       [2]    _tick
0x0120       [0]    __Lib_Lcd_cmd_status
0x0121       [1]    _Move_Valid
0x0122       [1]    _level
0x0123       [1]    _game
0x0124       [1]    ___savePCLATH
0x0125       [1]    ___saveSTATUS
0x0126       [1]    read_level_lvl_L0
0x0126       [1]    FARG_USART_Tx_trans
0x0127       [1]    FARG_Move_startx
0x0127       [2]    FARG_msDelay_ms
0x0127       [1]    FARG_Lcd_Out_row
0x0128       [1]    FARG_Lcd_Out_column
0x0128       [1]    FARG_Move_starty
0x0129       [1]    FARG_Move_endx
0x0129       [1]    FARG_Lcd_Out_text
0x012A       [1]    Lcd_Out_i_L0
0x012A       [1]    FARG_Move_endy
0x012B       [1]    FARG_Lcd_Chr_CP_out_char
0x012B       [1]    FARG_Move_Y_dir
0x012B       [1]    FARG_Move_X_dir
0x012B       [2]    FARG_abs_a
0x012B       [1]    FARG_Move_D_dir
0x012C       [2]    FARG_Move_D_steps
0x012C       [2]    FARG_Move_X_steps
0x012C       [2]    FARG_Move_Y_steps
0x012E       [2]    Move_X_j_L0
0x012E       [2]    Move_Y_j_L0
0x012E       [2]    Move_D_j_L0
0x0130       [1]    FARG_Lcd_Cmd_out_char
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0003       [1]    ?ICS_Rx_count
0x06B3      [15]    ?ICS_myRxBuffer
0x06C2       [2]    ?ICS_txtlvl
0x06C4       [8]    ?ICS?lstr11_ACB_2
0x06CC       [9]    ?ICS?lstr12_ACB_2
0x06D5      [12]    ?ICS?lstr7_ACB_2
0x06E1      [11]    ?ICS?lstr6_ACB_2
0x06EC      [17]    ?ICS?lstr5_ACB_2
0x06FD      [17]    ?ICS?lstr8_ACB_2
0x070E      [12]    ?ICS?lstr10_ACB_2
0x071A      [11]    ?ICS?lstr9_ACB_2
0x0725       [7]    ?ICS?lstr2_ACB_2
0x072C      [16]    ?ICS?lstr1_ACB_2
0x073C      [14]    ?ICS?lstr4_ACB_2
0x074A       [8]    ?ICS?lstr3_ACB_2
